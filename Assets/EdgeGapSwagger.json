{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
        "/monitor": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Monitor"
                        }
                    }
                },
                "description": "Monitor the API",
                "operationId": "monitoring",
                "security": [],
                "tags": [
                    "Monitoring"
                ]
            }
        },
        "/v1/aom/component": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker Component",
                "description": "Create a new matchmaker component.",
                "operationId": "post-matchmaker-component",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/component/{component_name}": {
            "parameters": [
                {
                    "name": "component_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker Component",
                "description": "Retrieve a matchmaker component.",
                "operationId": "get-matchmaker-component",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker Component",
                "description": "Update a matchmaker component with new specifications.",
                "operationId": "patch-matchmaker-component",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker Component",
                "description": "Delete a matchmaker component. It will not delete the matchmaker.",
                "operationId": "delete-matchmaker-component",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/component/{component_name}/env": {
            "parameters": [
                {
                    "name": "component_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker Component ENV",
                "description": "Create a new matchmaker component ENV.",
                "operationId": "post-matchmaker-component-env",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvsCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/component/{component_name}/env/{env_key}": {
            "parameters": [
                {
                    "name": "component_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "env_key",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker Component ENV",
                "description": "Retrieve a matchmaker component ENV.",
                "operationId": "get-matchmaker-component-env",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker Component ENV",
                "description": "Update a matchmaker component ENV.",
                "operationId": "patch-matchmaker-component-env",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvsUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker Component ENV",
                "description": "Delete a matchmaker component ENV. It will not delete the component or the matchmaker.",
                "operationId": "delete-matchmaker-component-env",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/component/{component_name}/envs": {
            "parameters": [
                {
                    "name": "component_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Matchmaker Component ENVs",
                "description": "List all ENVs for a specific matchmaker component.",
                "operationId": "get-envs-list",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/components": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Matchmaker Components",
                "description": "List all components for a specific matchmaker.",
                "operationId": "get-component-list",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker",
                "description": "Create a new matchmaker. A matchmaker is a top-level object; you must create child resources to work properly.",
                "operationId": "post-matchmaker",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker",
                "description": "Retrieve a matchmaker.",
                "operationId": "get-matchmaker",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker",
                "description": "Update a matchmaker with new specifications.",
                "operationId": "patch-matchmaker",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker",
                "description": "Delete a matchmaker.",
                "operationId": "delete-matchmaker",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}/release": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker Release",
                "description": "Create a matchmaker release.",
                "operationId": "post-matchmaker-release",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}/release/managed": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerManagedReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker Managed Release",
                "description": "Create a matchmaker managed release.",
                "operationId": "post-matchmaker-managed-release",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerManagedReleaseCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}/release/managed/{release_version}": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "release_version",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerManagedReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker Managed Release",
                "description": "Retrieve a matchmaker managed release.",
                "operationId": "get-matchmaker-managed-release",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerManagedReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker Managed Release",
                "description": "Update a matchmaker managed release.",
                "operationId": "patch-matchmaker-managed-release",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerManagedReleaseUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker Managed Release",
                "description": "Delete a matchmaker managed release. It will not delete the matchmaker.",
                "operationId": "delete-matchmaker-managed-release",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}/release/{release_version}": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "release_version",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker Release",
                "description": "Retrieve a matchmaker release.",
                "operationId": "get-matchmaker-release",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker Release",
                "description": "Update a matchmaker release.",
                "operationId": "patch-matchmaker-release",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker Release",
                "description": "Delete a matchmaker release.",
                "operationId": "delete-matchmaker-release",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmaker/{matchmaker_name}/releases": {
            "parameters": [
                {
                    "name": "matchmaker_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Matchmaker Releases",
                "description": "List all releases of a specific matchmaker.",
                "operationId": "get-release-list",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/matchmakers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Matchmakers",
                "description": "List all matchmakers.",
                "operationId": "get-matchmaker-list",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/release/config": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Matchmaker Release Config",
                "description": "Create a matchmaker release config.",
                "operationId": "post-matchmaker-release-config",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseConfigCreate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/release/config/{config_name}": {
            "parameters": [
                {
                    "name": "config_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Matchmaker Release Config",
                "description": "Get a matchmaker release config.",
                "operationId": "get-matchmaker-release-config",
                "tags": [
                    "Matchmaker"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Matchmaker Release Config",
                "description": "Update a matchmaker release config.",
                "operationId": "patch-matchmaker-release-config",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerReleaseConfigUpdate"
                        }
                    }
                ],
                "tags": [
                    "Matchmaker"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Matchmaker Release Config",
                "description": "Delete a matchmaker release config.",
                "operationId": "delete-matchmaker-release-config",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/aom/release/configs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MatchmakerComponentEnvListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Matchmaker Release Configs",
                "description": "List all configs for a specific matchmaker release.",
                "operationId": "get-release-configs-list",
                "tags": [
                    "Matchmaker"
                ]
            }
        },
        "/v1/app": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a New Application",
                "description": "Create an application that will regroup application versions.",
                "operationId": "application-post",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPost"
                        }
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}": {
            "parameters": [
                {
                    "name": "app_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get an Application",
                "description": "Retrieve an application and its information.",
                "operationId": "application-get",
                "tags": [
                    "Applications"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update an Application",
                "description": "Update an application with new information.",
                "operationId": "application-patch",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPatch"
                        }
                    }
                ],
                "tags": [
                    "Applications"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete an Application",
                "description": "Delete an application and all its current versions.",
                "operationId": "application-delete",
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}/version": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionCreateResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a New Application Version",
                "description": "Create an application version associated with an application. The version contains all the specifications to create a deployment.",
                "operationId": "app-version-post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application associated"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AppVersionPayload"
                        }
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}/version/{version_name}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionDelete"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete an Application Version",
                "description": "Delete a specific version of an application.",
                "operationId": "app-version-delete",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get an Application Version",
                "description": "Retrieve the specifications of an application version.",
                "operationId": "app-version-get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionUpdateResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update an Application Version",
                "description": "Update an application version with new specifications.",
                "operationId": "app-versions-patch",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AppVersionUpdatePayload"
                        }
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}/version/{version_name}/whitelist": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionWhitelistResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All ACL Entries for an Application Version",
                "description": "List all the access control list entries for a specific application version.",
                "operationId": "app-version-whitelist-get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionWhitelistEntrySuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create an ACL Entry",
                "description": "Create an access control list entry for an app version. This will allow the specified CIDR to connect to the deployment. The option ```whitelisting_active``` must be activated in the application version.",
                "operationId": "app-version-whitelist-post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AppVersionWhitelistEntryPayload"
                        }
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}/version/{version_name}/whitelist/{entry_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionWhitelistEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get an ACL Entry",
                "description": "Retrieve a specific access control list entry for an application version.",
                "operationId": "app-version-whitelist-entry-get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    },
                    {
                        "name": "entry_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The unique ID of the entry"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionWhitelistEntrySuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete an ACL Entry",
                "description": "Delete an access control list entry for a specific application version",
                "operationId": "app-version-whitelist-entry-delete",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version"
                    },
                    {
                        "name": "entry_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The unique ID of the entry"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/app/{app_name}/versions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AppVersionList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Versions for an Application",
                "description": "List all versions of a specific application.",
                "operationId": "app-versions-get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application"
                    }
                ],
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/apps": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Applications"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Applications",
                "description": "List all the applications that you own.",
                "operationId": "applications-get",
                "tags": [
                    "Applications"
                ]
            }
        },
        "/v1/container-registry/images/{image_name}/tags": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ImageTagList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Tags for a Registry Image",
                "description": "List all tags of a specific registry image.",
                "operationId": "registry-image-tag-list",
                "parameters": [
                    {
                        "name": "image_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the image"
                    }
                ],
                "tags": [
                    "Container Registry"
                ]
            }
        },
        "/v1/container-registry/images/{image_name}/tags/{tag_name}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api-model-registryartifacttagdeleteresponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete Tag For a Registry Image",
                "description": "Delete a single tag from a artifact in the registry.",
                "operationId": "image-tag-delete",
                "parameters": [
                    {
                        "name": "image_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the image"
                    },
                    {
                        "name": "tag_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the tag"
                    }
                ],
                "tags": [
                    "Container Registry"
                ]
            }
        },
        "/v1/context/{request_id}/{security_number}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Deployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get the Context of a Deployment",
                "description": "Retrieve contextual information about your live deployment. You should use this URL inside your deployment container. The URL is injected in your deployment and accessible via the environment variable ARBITRIUM_CONTEXT_URL.",
                "operationId": "context-get",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. "
                    },
                    {
                        "name": "security_number",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Random Security number generate to validate the request id."
                    },
                    {
                        "name": "authorization",
                        "in": "header",
                        "type": "string",
                        "required": true,
                        "description": "Auto Generated token. This token is injected in your deployment and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
                    }
                ],
                "security": [],
                "tags": [
                    "Context"
                ]
            }
        },
        "/v1/context/{request_id}/{security_number}/tags": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ContextDeploymentTagResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Tag for a Running Deployment",
                "description": "Create a tag for a running deployment. You should use this URL inside your deployment container. The URL is injected in your deployment and accessible via the environment variable ARBITRIUM_CONTEXT_URL and you need to append \"/tags\" at the end of this URL.",
                "operationId": "context-create-deployment-tag",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. "
                    },
                    {
                        "name": "security_number",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Random Security number generate to validate the request id."
                    },
                    {
                        "name": "authorization",
                        "in": "header",
                        "type": "string",
                        "required": true,
                        "description": "Auto Generated token. This token is injected in your deployment and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "security": [],
                "tags": [
                    "Context"
                ]
            }
        },
        "/v1/context/{request_id}/{security_number}/tags/{tag_name}": {
            "parameters": [
                {
                    "name": "tag_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Tag from a Running Deployment",
                "description": "Delete a tag from a running deployment. You should use this URL inside your deployment container. The URL is injected in your deployment and accessible via the environment variable ARBITRIUM_CONTEXT_URL and you need to append \"/tags/{tag_name}\" at the end of this URL.",
                "operationId": "context-delete-deployment-tag",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. "
                    },
                    {
                        "name": "security_number",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Random Security number generate to validate the request id."
                    },
                    {
                        "name": "authorization",
                        "in": "header",
                        "type": "string",
                        "required": true,
                        "description": "Auto Generated token. This token is injected in your deployment and can be found via the environment variable named ARBITRIUM_CONTEXT_TOKEN "
                    }
                ],
                "security": [],
                "tags": [
                    "Context"
                ]
            }
        },
        "/v1/deploy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Deployment",
                "description": "Create a new deployment. Deployment is a server instance of your application version.",
                "operationId": "deploy",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeployModel"
                        }
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/deployment/{request_id}/container-logs": {
            "parameters": [
                {
                    "name": "request_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api-model-containerlogs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get Deployment Container Logs",
                "description": "Retrieve the logs of your container. Logs are not available when your deployment is terminated. You can set up an endpoint storage to save your logs. <a target='_blank' href='https://docs.edgegap.com/docs/deployment/endpoint-storage'>Endpoint Storage Documentation</a>",
                "operationId": "deployment-get-logs",
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/deployments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Deployments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Deployments",
                "description": "List all deployments.",
                "operationId": "deployments-get",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "description": "Query to filter the deployments."
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/deployments/bulk-stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentBulkStopResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete Deployments in Bulk",
                "description": "Make a bulk delete of deployments using filters. All the deployments matching the given filters will be permanently deleted.",
                "operationId": "deployments-bulk-delete",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeploymentBulkStopPayload"
                        }
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/deployments/{request_id}": {
            "parameters": [
                {
                    "name": "request_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentUpdateResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Updates properties of a deployment",
                "description": "Updates properties of a deployment. Currently only the `is_joinable_by_session` property can be updated.",
                "operationId": "deployment-update",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeploymentUpdatePayload"
                        }
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/deployments/{request_id}/tags": {
            "parameters": [
                {
                    "name": "request_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create Tag for a Deployment",
                "description": "Create a tag for a deployment. The tag will however not be injected into a running container.",
                "operationId": "deployments-tags-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagPayload"
                        }
                    }
                ],
                "tags": [
                    "Deployment Tags"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List tags for a Deployment",
                "description": "List tags for a deployment.",
                "operationId": "deployments-tags-list",
                "tags": [
                    "Deployment Tags"
                ]
            }
        },
        "/v1/deployments/{request_id}/tags/{tag_name}": {
            "parameters": [
                {
                    "name": "request_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "tag_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                },
                "summary": "Delete Tag for a Deployment",
                "description": "Delete a tag for a deployment. The tag will however not be removed from the environment of a running container.",
                "operationId": "deployments-tags-delete",
                "tags": [
                    "Deployment Tags"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get tag for a Deployment",
                "description": "Get tag for a deployment.",
                "operationId": "deployments-tags-read",
                "tags": [
                    "Deployment Tags"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update Tag for a Deployment",
                "description": "Update a tag for a deployment.",
                "operationId": "deployments-tags-update",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeploymentTagPayload"
                        }
                    }
                ],
                "tags": [
                    "Deployment Tags"
                ]
            }
        },
        "/v1/deployments:available": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeploymentAvailableResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Deployments with Available Sockets",
                "description": "Get the list of deployments that have available sockets sorted by proximity to the geographical data.",
                "operationId": "deployments-available",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeploymentAvailablePayload"
                        }
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/fleet": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetPostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Fleet",
                "description": "Create a fleet. A fleet is a top-level object; you must create child resources to work properly.",
                "operationId": "fleet-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FleetPostPayload"
                        }
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/fleet/{fleet_name}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetDeleteResponse"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Fleet",
                "description": "Delete a fleet, its policies and links between the application versions.",
                "operationId": "fleet-delete",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetGetResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Fleet",
                "description": "Retrieve a fleet with its details.",
                "operationId": "fleet-get",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetPatchResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Fleet",
                "description": "Update a fleet with new specifications.",
                "operationId": "fleet-update",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FleetPatchPayload"
                        }
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/fleet/{fleet_name}/app/{app_name}/version/{version_name}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HorizontalScalerAppVersionLink"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Link an Application Version to a Fleet",
                "description": "Link an application version to a fleet. By linking this version, the fleet will automatically create deployments of this version according to the fleet policies.",
                "operationId": "fleet-link-app-version",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application to link"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version to link"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Unlink an Application Version From a Fleet",
                "description": "Unlink an application version from a fleet. It will not delete the application version or the fleet",
                "operationId": "fleet-unlink-app-version",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application to link"
                    },
                    {
                        "name": "version_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the application version to link"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/fleet/{fleet_name}/policies": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HorizontalScalerConstraintList"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Policies of a Fleet",
                "description": "List all the policies of a fleet.",
                "operationId": "fleet-policies-list",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit of Fleet for each page",
                        "default": 10
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetPoliciesPostResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Fleet Policy",
                "description": "Create a fleet policy. Policies are conditions that the fleet must respect.",
                "operationId": "fleet-policies-create",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FleetPoliciesPostPayload"
                        }
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/fleet/{fleet_name}/policies/{policy_name}": {
            "delete": {
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Policy",
                "description": "Delete a policy. It will not delete the fleet.",
                "operationId": "fleet-policies-delete",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "policy_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the policy to delete"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetPoliciesGetResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Policy",
                "description": "Retrieve a specific policy of a fleet.",
                "operationId": "fleet-policies-get",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "policy_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the policy"
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetPoliciesPatchPayload"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Policy",
                "description": "Update a policy with new specifications.",
                "operationId": "fleet-policies-update",
                "parameters": [
                    {
                        "name": "fleet_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the fleet"
                    },
                    {
                        "name": "policy_name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the policy"
                    },
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FleetPoliciesPatchPayload"
                        }
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/fleets": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FleetList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Fleets",
                "description": "List all the fleets you own.",
                "operationId": "fleets",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit of Fleet for each page",
                        "default": 10
                    }
                ],
                "tags": [
                    "Fleets"
                ]
            }
        },
        "/v1/ip": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IPAddressResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get Your Public IP",
                "description": "Retrieve your public IP address.",
                "operationId": "IP",
                "tags": [
                    "IP Lookup"
                ]
            }
        },
        "/v1/ip/{ip}/lookup": {
            "parameters": [
                {
                    "name": "ip",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IPAddressLookupResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get an IP's information",
                "description": "Lookup an IP address and return the associated information.",
                "operationId": "IP lookup",
                "tags": [
                    "IP Lookup"
                ]
            }
        },
        "/v1/ips/lookup": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IPAddressesLookupResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get IPs Information in Bulk",
                "description": "Lookup IP addresses and return the associated information. Maximum of 20 IPs.",
                "operationId": "IPs lookup",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/IPAddressesLookupPayload"
                        }
                    }
                ],
                "tags": [
                    "IP Lookup"
                ]
            }
        },
        "/v1/lobbies": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Lobby",
                "description": "Create a named lobby.",
                "operationId": "lobby-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LobbyCreatePayload"
                        }
                    }
                ],
                "tags": [
                    "Lobbies"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Lobbies",
                "description": "List the Lobbies",
                "operationId": "lobby-List",
                "tags": [
                    "Lobbies"
                ]
            }
        },
        "/v1/lobbies/{lobby_name}": {
            "parameters": [
                {
                    "name": "lobby_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    }
                },
                "summary": "Delete a Lobby",
                "description": "Delete a named lobby.",
                "operationId": "lobby-Delete",
                "tags": [
                    "Lobbies"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Lobby",
                "description": "Get a named lobby.",
                "operationId": "lobby-Get",
                "tags": [
                    "Lobbies"
                ]
            }
        },
        "/v1/lobbies:deploy": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Deploy a Lobby",
                "description": "Deploy the lobby with the given name.",
                "operationId": "lobby-deploy",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LobbyDeployPayload"
                        }
                    }
                ],
                "tags": [
                    "Lobbies"
                ]
            }
        },
        "/v1/lobbies:terminate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LobbyReadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Terminate a Lobby",
                "description": "Terminate the lobby with the given name.",
                "operationId": "lobby-terminate",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LobbyTerminatePayload"
                        }
                    }
                ],
                "tags": [
                    "Lobbies"
                ]
            }
        },
        "/v1/locations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Locations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Locations",
                "description": "List all the locations available to deploy on. You can specify an application and a version to filter out the locations that don\u2019t have enough resources to deploy this application version.",
                "operationId": "locations-get",
                "parameters": [
                    {
                        "name": "app",
                        "in": "query",
                        "type": "string",
                        "description": "The App Name you want to filter with capacity"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "type": "string",
                        "description": "The Version Name you want to filter with capacity"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "The type of the location"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "type": "string",
                        "description": "Gets locations with tags. Set to: \"true\" to have the tags"
                    }
                ],
                "tags": [
                    "Locations"
                ]
            }
        },
        "/v1/locations/beacons": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/LocationBeaconList"
                        }
                    }
                },
                "summary": "List All Location Beacons",
                "description": "List all the active location beacons. They can be used to ping them for your matchmaking system. You cannot deploy on beacons.",
                "operationId": "location-beacon-list",
                "tags": [
                    "Locations"
                ]
            }
        },
        "/v1/metrics/deployment/{request_id}": {
            "parameters": [
                {
                    "name": "request_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MetricsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Deployment Metrics",
                "description": "Get the metrics for a specific deployment based on the ```start_time```, ```end_time``` and ```steps```. ```raw``` parameter can be set to true to get the raw data.",
                "operationId": "deployment-metrics-get",
                "parameters": [
                    {
                        "description": "Starting time for the query. Default to deployment start time. Should match %Y-%m-%d %H:%M:%S.%f\n\n\t\tExample: 2021-07-10 00:00:00.00",
                        "name": "start_time",
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "description": "End time for the metrics. Default to now.Must be greater than start_time. Should match %Y-%m-%d %H:%M:%S.%f\n\n\t\tExample: 2021-07-19 00:00:00.00",
                        "name": "end_time",
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "description": "Steps between each metrics.\n\n\t\tExample: 30s, 1m, 5m 10m, 1h ",
                        "name": "steps",
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "description": "If set to true, will return the raw data. Default to false.",
                        "name": "raw",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Metrics"
                ]
            }
        },
        "/v1/relays/sessions": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionBaseResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Relay Session",
                "description": "Create a relay session with users.",
                "operationId": "relay-session-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionCreatePayload"
                        }
                    }
                ],
                "tags": [
                    "Relays"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionListResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List all Relay Sessions",
                "description": "List all the active relay sessions.",
                "operationId": "relay-session-list",
                "tags": [
                    "Relays"
                ]
            }
        },
        "/v1/relays/sessions/{session_id}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                },
                "summary": "Delete a Relay Session",
                "description": "Delete a relay session.",
                "operationId": "relay-session-delete",
                "tags": [
                    "Relays"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionBaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Relay Session",
                "description": "Retrieve the information for a relay session.",
                "operationId": "relay-session-get",
                "tags": [
                    "Relays"
                ]
            }
        },
        "/v1/relays/sessions:authorize-user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionUserBaseResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Authorize a user on a Relay Session",
                "description": "Authorize a user on a Relay Session",
                "operationId": "relay-user-authorize",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RelayUserAuthorizePayload"
                        }
                    }
                ],
                "tags": [
                    "Relays"
                ]
            }
        },
        "/v1/relays/sessions:revoke-user": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/RelaySessionBaseResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                },
                "summary": "Remove a user on a Relay Session",
                "description": "Authorize a user on a Relay Session",
                "operationId": "relay-user-revoke",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RelayUserRevokePayload"
                        }
                    }
                ],
                "tags": [
                    "Relays"
                ]
            }
        },
        "/v1/self/stop/{request_id}/{access_point_id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Delete"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/DeleteRequestReceived"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "410": {
                        "description": "Instance Already terminated",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Deployment from inside the container",
                "description": "Delete a deployment from the inside of a container. You should use this URL inside your deployment. The URL is injected in your deployment and can be found via the environment variable ARBITRIUM_DELETE_URL.",
                "operationId": "self-deployment-delete",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. It's included in the response of the app deploy, example: \n\n\t93924761ccde"
                    },
                    {
                        "name": "access_point_id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Access Point Number provided by our system"
                    },
                    {
                        "name": "authorization",
                        "in": "header",
                        "type": "string",
                        "required": true,
                        "description": "Auto Generated token. This token is injected in your deployment and can be found via the environment variable named ARBITRIUM_DELETE_TOKEN"
                    },
                    {
                        "name": "container_log_storage",
                        "in": "query",
                        "type": "string",
                        "description": "If you want to enable the container log storage for the deployment. You can put 'true' if you already have endpoint storage associated with your deployment's app version. You can put 'false' if it is enabled by default and you want to disable it for this specific request. Or you can put the name of your endpoint storage and if it is valid we will store the container logs."
                    }
                ],
                "security": [],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/session": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionRequest"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a Session",
                "description": "Create a session with users. Sessions are linked to a deployment.",
                "operationId": "session-post",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SessionModel"
                        }
                    }
                ],
                "tags": [
                    "Sessions"
                ]
            }
        },
        "/v1/session/{session_id}": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionGet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Session",
                "description": "Retrieve the information for a session.",
                "operationId": "get-session",
                "tags": [
                    "Sessions"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionDelete"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "410": {
                        "description": "Instance Already terminated",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Session",
                "description": "Delete a session. Once deleted, a session is no more accessible and does not have a history. The deployment associated will not be deleted.",
                "operationId": "session-delete",
                "tags": [
                    "Sessions"
                ]
            }
        },
        "/v1/session/{session_id}/users": {
            "parameters": [
                {
                    "name": "session_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionUserContext"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List Users of a Session",
                "description": "List all the users of session.",
                "operationId": "get-users-session",
                "tags": [
                    "Sessions"
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionUserContext"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Put Users in a Session",
                "description": "Add specified users to a session.",
                "operationId": "put-users-session",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PatchSessionModel"
                        }
                    }
                ],
                "tags": [
                    "Sessions"
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionUserContext"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete Users From a Session",
                "description": "Remove specified users from a session.",
                "operationId": "delete-users-session",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PatchSessionModel"
                        }
                    }
                ],
                "tags": [
                    "Sessions"
                ]
            }
        },
        "/v1/sessions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Sessions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Sessions",
                "description": "List all the active sessions.",
                "operationId": "list-sessions",
                "tags": [
                    "Sessions"
                ]
            }
        },
        "/v1/sessions/bulk-stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SessionBulkStopResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete Sessions in Bulk",
                "description": "Make a bulk delete of sessions using filters. All the sessions matching the given filters will be permanently deleted.",
                "operationId": "sessions-bulk-stop",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SessionBulkStopPayload"
                        }
                    }
                ],
                "tags": [
                    "Sessions"
                ]
            }
        },
        "/v1/status/{request_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Deployment Status and Information",
                "description": "Retrieve the information for a deployment.",
                "operationId": "deployment-status-get",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. It's included in the response of the app deploy, example: \n\n\t93924761ccde"
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/stop/{request_id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Delete"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/DeleteRequestReceived"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "410": {
                        "description": "Instance Already terminated",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Deployment",
                "description": "Delete an instance of deployment. It will stop the running container and all its games.",
                "operationId": "deployment-delete",
                "parameters": [
                    {
                        "name": "request_id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "Unique Identifier to keep track of your request across all Arbitrium ecosystem. It's included in the response of the app deploy, example: \n\n\t93924761ccde"
                    },
                    {
                        "name": "container_log_storage",
                        "in": "query",
                        "type": "string",
                        "description": "If you want to enable the container log storage for the deployment. You can put 'true' if you already have endpoint storage associated with your deployment's app version. You can put 'false' if it is enabled by default and you want to disable it for this specific request. Or you can put the name of your endpoint storage and if it is valid we will store the container logs."
                    }
                ],
                "tags": [
                    "Deployments"
                ]
            }
        },
        "/v1/storage/endpoint": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointStoragePostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a New Endpoint Storage",
                "description": "Create an endpoint storage to store your container logs at the end of a deployment.",
                "operationId": "endpoint-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EndpointStoragePostPayload"
                        }
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoint/{endpoint_name}": {
            "parameters": [
                {
                    "name": "endpoint_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointStorageDeleteResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Delete an Endpoint Storage",
                "description": "Delete an endpoint storage. All the application versions linked to it won't be able to store logs anymore.",
                "operationId": "endpoint-delete",
                "tags": [
                    "Endpoint Storage"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointStorageGetResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get an Endpoint Storage",
                "description": "Retrieve an endpoint storage. The ```secret_access_key``` won't be displayed.",
                "operationId": "endpoint-get",
                "tags": [
                    "Endpoint Storage"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointStoragePatchResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update an Endpoint Storage",
                "description": "Update an Endpoint Storage with new specifications.",
                "operationId": "endpoint-update",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EndpointStoragePatchPayload"
                        }
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoint/{endpoint_name}/pull-profile": {
            "parameters": [
                {
                    "name": "endpoint_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PullProfilePostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a New Pull Profile",
                "description": "Create a pull profile. Pull profile will upload data from an endpoint storage to a deployment container on boot. You must link the application version to the pull profile first.",
                "operationId": "pull-profile-create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PullProfilePostPayload"
                        }
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoint/{endpoint_name}/pull-profile/{pull_profile_name}": {
            "parameters": [
                {
                    "name": "endpoint_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "pull_profile_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Delete a Pull Profile",
                "description": "Delete a pull profile. All the application versions linked won't receive the data upload anymore. It will not delete your endpoint storage.",
                "operationId": "pull-profile-delete",
                "tags": [
                    "Endpoint Storage"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PullProfileGetResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get a Pull Profile",
                "description": "Retrieve a pull profile and its specifications.",
                "operationId": "pull-profile-get",
                "tags": [
                    "Endpoint Storage"
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PulloProfilePatchResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Update a Pull Profile",
                "description": "Update a pull profile with new specifications.",
                "operationId": "pull-profile-update",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PullProfilePatchPayload"
                        }
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoint/{endpoint_name}/pull-profile/{pull_profile_name}/app/{app_name}/version/{version_name}": {
            "parameters": [
                {
                    "name": "endpoint_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "pull_profile_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "app_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "version_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PullProfileAppVersionLinkResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Link a Pull Profile to an Application Version",
                "description": "Link a pull profile to an app version. Without a link, the pull profile by itself will do nothing.",
                "operationId": "pull-profile-link-app-version",
                "tags": [
                    "Endpoint Storage"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Unlink a Pull Profile From an Application Version",
                "description": "Unlink a pull profile from an app version. It will not delete the pull profile.",
                "operationId": "pull-profile-unlink-app-version",
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoint/{endpoint_name}/pull-profiles": {
            "parameters": [
                {
                    "name": "endpoint_name",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PullProfilesListResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Pull Profile of an Endpoint Storage",
                "description": "List all pull profiles of an endpoint storage.",
                "operationId": "pull-profile-list",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit of pull profiles for each page",
                        "default": 10
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/storage/endpoints": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointStorageListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "List All Endpoint Storage",
                "description": "List all endpoint storage.",
                "operationId": "endpoints-list",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit of Fleet for each page",
                        "default": 10
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "Endpoint Storage"
                ]
            }
        },
        "/v1/telemetry/active-deployments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ActiveDeploymentTelemetryResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Create a New Active Deployment Telemetry Request",
                "description": "Create a telemetry request to get the best deployment(s) for given IP(s). You can use this to add players on a running deployment. If you set a webhook URL, the result will be sent to it.",
                "operationId": "active-deployment-telemetry-post",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActiveDeploymentTelemetryRequest"
                        }
                    }
                ],
                "tags": [
                    "Telemetry"
                ]
            }
        },
        "/v1/telemetry/active-deployments/{retrieval_key}": {
            "parameters": [
                {
                    "name": "retrieval_key",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ActiveDeploymentTelemetryGetResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "summary": "Get the Result of an Active Deployment Telemetry Request",
                "description": "Retrieve the results of a telemetry request on active deployment(s) for given IP(s). The score array is sorted from the best to the worse deployment. You can use this to add players on a running deployment.",
                "operationId": "active-deployment-telemetry-get",
                "tags": [
                    "Telemetry"
                ]
            }
        }
    },
    "info": {
        "title": "Edgegap V1",
        "description": "<h1 style=\"margin-top: 2rem\">Introduction</h1>\n<p>The Edgegap API lets you manage all your resources from standard HTTP requests. We promote using them to automate all your processes that are using Edgegap.</p>\n<p>If you have any questions, don't hesitate to contact us via email, or you can also jump on our <a href=\"https://discord.com/invite/GYaHcKR9a5\" target=\"_blank\">Discord</a>. We will be happy to help. Feel free to make features request; we also love those.</p>\n<div class=\"theme-doc-markdown markdown\"><h2 class=\"anchor anchorWithStickyNavbar_node_modules-@docusaurus-theme-classic-lib-theme-Heading-styles-module\" id=\"pagination---response\">Pagination - Response<a class=\"hash-link\" href=\"#pagination---response\" title=\"Direct link to heading\">\u200b</a></h2><p>The GET response body can be returned with pagination to avoid requesting all the data at once.</p><p>Pagination object will always be under the  <em>paginator</em> key.</p><div class=\"language-json codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><pre tabindex=\"0\" class=\"prism-code language-json codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"The Current page, default=1\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"next_page_number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"The Next page number or null\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"previous_page_number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"The Previous page number or null\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"paginator\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"num_pages\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"The total numbers of pages\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"has_next\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"Boolean if there is a next page\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"has_previous\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"Boolean if there is a previous page\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><br></span></code></pre><div class=\"buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>Full Body Example:</p><div class=\"language-json codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><pre tabindex=\"0\" class=\"prism-code language-json codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"count\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color: rgb(247, 140, 108);\">100</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"data\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">[</span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"value-0\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"[...]\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color: rgb(195, 232, 141);\">\"value-9\"</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">]</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"success\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color: rgb(255, 88, 116);\">true</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token property\">\"pagination\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color: rgb(247, 140, 108);\">1</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"next_page_number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color: rgb(247, 140, 108);\">2</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"previous_page_number\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token null keyword\" style=\"font-style: italic;\">null</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"paginator\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">      </span><span class=\"token property\">\"num_pages\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color: rgb(247, 140, 108);\">10</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"has_next\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color: rgb(255, 88, 116);\">true</span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">    </span><span class=\"token property\">\"has_previous\"</span><span class=\"token operator\" style=\"color: rgb(137, 221, 255);\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color: rgb(255, 88, 116);\">false</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color: rgb(199, 146, 234);\">}</span><br></span></code></pre><div class=\"buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><h2 class=\"anchor anchorWithStickyNavbar_node_modules-@docusaurus-theme-classic-lib-theme-Heading-styles-module\" id=\"pagination---parameters\">Pagination - Parameters<a class=\"hash-link\" href=\"#pagination---parameters\" title=\"Direct link to heading\">\u200b</a></h2><p>You can add those values to manipulate the pagination object in the URL Parameters.</p><ul class=\"\"><li>page</li><li>limit</li></ul><p>Example:</p><div class=\"language-text codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module theme-code-block\" style=\"--prism-color:#bfc7d5; --prism-background-color:#292d3e;\"><div class=\"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module thin-scrollbar\"><code class=\"codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"># To get the second page</span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?page=2</span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\" style=\"display: inline-block;\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"># To change the count of element in one page (20/page)</span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?limit=20</span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\" style=\"display: inline-block;\"></span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\"># You can mix those (20/page, second page)</span><br></span><span class=\"token-line\" style=\"color: rgb(191, 199, 213);\"><span class=\"token plain\">GET - https://api.edgegap.com/v1/apps?page=2&amp;limit=20</span><br></span></code></pre><div class=\"buttonGroup_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-CopyButton-styles-module\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div></div>",
        "termsOfService": "https://console.edgegap.com/terms-of-service",
        "contact": {
            "name": "Email",
            "email": "info@edgegap.com",
            "url": "https://edgegap.com"
        }
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "apiKey": {
            "type": "apiKey",
            "in": "header",
            "name": "authorization",
            "description": "<p>The Edgegap API uses API keys for authentication. You can create one via the <a href='https://console.edgegap.com' target='_blank'>Dashboard.</a> You must keep your API token secure and not publicly share it. You can disable or delete a token on the dashboard.</p>\n\n<p>Example: <code>{ \"authorization\": \"token YOUR_API_TOKEN\" }</code></p>"
        }
    },
    "security": [
        {
            "apiKey": []
        }
    ],
    "tags": [
        {
            "name": "Deployments",
            "description": "Deployments Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment' target='_blank'>this documentation</a> to get started with deployments."
        },
        {
            "name": "Applications",
            "description": "Applications Control API - Please refer to <a href='https://docs.edgegap.com/docs/application' target='_blank'>this documentation</a> to get started with applications."
        },
        {
            "name": "Locations",
            "description": "Locations API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/locations/beacons' target='_blank'>this documentation</a> to get started with locations beacons."
        },
        {
            "name": "Sessions",
            "description": "Sessions Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/session' target='_blank'>this documentation</a> to get started with sessions."
        },
        {
            "name": "Metrics",
            "description": "Metrics API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/metrics' target='_blank'>this documentation</a> to get started with your deployment metrics."
        },
        {
            "name": "Matchmaker",
            "description": "Matchmaker Control API - Please refer to <a href='https://docs.edgegap.com/docs/matchmaker' target='_blank'>this documentation</a> to get started with matchmakers."
        },
        {
            "name": "Telemetry",
            "description": "Active Deployment Telemetry API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/active-deployment-telemetry' target='_blank'>this documentation</a> to get started with active deployment telemetry."
        },
        {
            "name": "IP Lookup",
            "description": "IP API - IP addresses related operations."
        },
        {
            "name": "Fleets",
            "description": "Fleets Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/session/fleet-manager/fleet' target='_blank'>this documentation</a> to get started with fleets."
        },
        {
            "name": "Endpoint Storage",
            "description": "Endpoint Storage Control API - Please refer to <a href='https://docs.edgegap.com/docs/deployment/endpoint-storage' target='_blank'>this documentation</a> to get started with storage."
        },
        {
            "name": "Relays",
            "description": "Handles Relay Sessions operations. Those operations are similar to Sessions but are simplified to be used with relays."
        },
        {
            "name": "Lobbies",
            "description": "Management of Arbitrium lobbies."
        },
        {
            "name": "Deployment Tags",
            "description": "Deployment Tags API - Deployment Tags related operations."
        },
        {
            "name": "Container Registry",
            "description": "Container Registry API"
        },
        {
            "name": "Context",
            "description": "Context API - Context related operations. These routes are only accessible from within a deployment. They need a special token to be accessed and the Application Version that is deployed must have an injected context."
        },
        {
            "name": "Monitoring",
            "description": "Monitoring"
        }
    ],
    "definitions": {
        "DeploymentUpdatePayload": {
            "properties": {
                "is_joinable_by_session": {
                    "type": "boolean",
                    "description": "Whether a session can connect to this deployment or not."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "DeploymentUpdateResponse": {
            "required": [
                "is_joinable_by_session"
            ],
            "properties": {
                "is_joinable_by_session": {
                    "type": "boolean",
                    "description": "If the deployment is joinable by sessions"
                }
            },
            "type": "object"
        },
        "Error": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message depending of the request termination"
                }
            },
            "type": "object"
        },
        "DeploymentBulkStopPayload": {
            "required": [
                "filters"
            ],
            "properties": {
                "filters": {
                    "type": "array",
                    "description": "Filters used to match with deployments",
                    "items": {
                        "$ref": "#/definitions/DeploymentBulkStopFiltersPayload"
                    }
                }
            },
            "type": "object"
        },
        "DeploymentBulkStopFiltersPayload": {
            "required": [
                "field",
                "filter_type",
                "values"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The field on which to apply the filter",
                    "example": "request_id",
                    "enum": [
                        "request_id",
                        "deployment_tags"
                    ]
                },
                "values": {
                    "type": "array",
                    "description": "Values that will be used for the filter",
                    "items": {
                        "type": "string"
                    }
                },
                "filter_type": {
                    "type": "string",
                    "description": "Types of filter used. Possible values are: ['any', 'all', 'not']",
                    "example": "any",
                    "enum": [
                        "any",
                        "all",
                        "not"
                    ]
                }
            },
            "type": "object"
        },
        "DeploymentBulkStopResponse": {
            "required": [
                "processable"
            ],
            "properties": {
                "processable": {
                    "type": "array",
                    "description": "A list deployments that can be processed to be stopped",
                    "items": {
                        "$ref": "#/definitions/DeploymentStopResponse"
                    }
                }
            },
            "type": "object"
        },
        "DeploymentStopResponse": {
            "required": [
                "request_id"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "The id of the request for a deployment"
                }
            },
            "type": "object"
        },
        "DeploymentAvailablePayload": {
            "required": [
                "app_name",
                "app_version"
            ],
            "properties": {
                "app_name": {
                    "type": "string",
                    "description": "The name of the application"
                },
                "app_version": {
                    "type": "string",
                    "description": "the name of the application version"
                },
                "minimum_sockets": {
                    "type": "integer",
                    "description": "The minimum number of sockets required"
                },
                "ip_list": {
                    "type": "array",
                    "description": "The list of IPs",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "type": "string",
                    "description": "The location of the deployment"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the deployment"
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the deployment"
                }
            },
            "type": "object"
        },
        "DeploymentAvailableResponse": {
            "required": [
                "data",
                "pagination"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "description": "The list of deployments",
                    "items": {
                        "$ref": "#/definitions/DeploymentAvailable"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "DeploymentAvailable": {
            "required": [
                "app_name",
                "app_version",
                "available_sockets",
                "request_id"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "The ID of the deployment"
                },
                "app_name": {
                    "type": "string",
                    "description": "The name of the application"
                },
                "app_version": {
                    "type": "string",
                    "description": "The name of the application version"
                },
                "available_sockets": {
                    "type": "integer",
                    "description": "The number of sockets"
                }
            },
            "type": "object"
        },
        "Pagination": {
            "properties": {
                "number": {
                    "type": "integer",
                    "description": "Current page number"
                },
                "next_page_number": {
                    "type": "integer",
                    "description": "Next page number"
                },
                "previous_page_number": {
                    "type": "integer",
                    "description": "Previous page number"
                },
                "paginator": {
                    "$ref": "#/definitions/Paginator"
                },
                "has_next": {
                    "type": "boolean",
                    "description": "If there is a next page"
                },
                "has_previous": {
                    "type": "boolean",
                    "description": "If there is a previous page"
                }
            },
            "type": "object"
        },
        "Paginator": {
            "properties": {
                "num_pages": {
                    "type": "integer",
                    "description": "Total pages count"
                }
            },
            "type": "object"
        },
        "Deployment": {
            "required": [
                "fqdn",
                "public_ip",
                "ready",
                "request_id",
                "status",
                "whitelisting_active"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "abc123"
                },
                "public_ip": {
                    "type": "string",
                    "description": "The public IP",
                    "example": "100.10.0.85"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of Deployment",
                    "example": "Status.READY"
                },
                "ready": {
                    "type": "boolean",
                    "description": "if the deployment is ready",
                    "example": true
                },
                "whitelisting_active": {
                    "type": "boolean",
                    "description": "if the deployment ACL is active",
                    "example": true
                },
                "fqdn": {
                    "type": "string",
                    "description": "",
                    "example": "abc123.test.edgegap.com"
                },
                "ports": {
                    "type": "object",
                    "example": {
                        "web": {
                            "external": 31587,
                            "internal": 8080,
                            "protocol": "http",
                            "name": "web",
                            "tls_upgrade": true,
                            "link": "https://example.com:31587",
                            "proxy": 65001
                        },
                        "7777": {
                            "external": 31669,
                            "internal": 7777,
                            "protocol": "UDP",
                            "name": "7777",
                            "tls_upgrade": false,
                            "link": "example.com:31669",
                            "proxy": 65002
                        }
                    },
                    "additionalProperties": {
                        "$ref": "#/definitions/PortMapping"
                    }
                },
                "location": {
                    "description": "Location related information",
                    "$ref": "#/definitions/DeploymentLocation"
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags associated with the deployment",
                    "items": {
                        "type": "string",
                        "example": "production"
                    }
                },
                "sockets": {
                    "type": "integer",
                    "description": "The Capacity of the Deployment",
                    "example": "5"
                },
                "sockets_usage": {
                    "type": "integer",
                    "description": "The Capacity Usage of the Deployment",
                    "example": "2"
                },
                "is_joinable_by_session": {
                    "type": "boolean",
                    "description": "If the deployment is joinable by sessions"
                }
            },
            "type": "object"
        },
        "PortMapping": {
            "properties": {
                "external": {
                    "type": "integer",
                    "description": "The Port to Connect from Internet",
                    "minimum": 1,
                    "maximum": 65535
                },
                "internal": {
                    "type": "integer",
                    "description": "The internal Port of the Container",
                    "minimum": 1,
                    "maximum": 65535
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol (i.e. 'TCP')"
                },
                "name": {
                    "type": "string",
                    "description": "The Name of the port if given, default to internal port in string"
                },
                "tls_upgrade": {
                    "type": "boolean",
                    "description": "If the port require TLS Upgrade"
                },
                "link": {
                    "type": "string",
                    "description": "link of the port with scheme depending of the protocol"
                },
                "proxy": {
                    "type": "integer",
                    "description": "Internal Proxy Mapping"
                }
            },
            "type": "object"
        },
        "DeploymentLocation": {
            "required": [
                "administrative_division",
                "city",
                "continent",
                "country",
                "latitude",
                "longitude",
                "timezone"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City of the deployment",
                    "example": "Montreal"
                },
                "country": {
                    "type": "string",
                    "description": "Country of the deployment",
                    "example": "Canada"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent of the deployment",
                    "example": "North America"
                },
                "administrative_division": {
                    "type": "string",
                    "description": "Administrative division of the deployment",
                    "example": "Quebec"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone of the deployment",
                    "example": "Eastern Time"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude of the deployment",
                    "example": 45.508888
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude of the deployment",
                    "example": -73.561668
                }
            },
            "type": "object"
        },
        "DeployModel": {
            "required": [
                "app_name"
            ],
            "properties": {
                "app_name": {
                    "type": "string",
                    "description": "The name of the App you want to deploy"
                },
                "version_name": {
                    "type": "string",
                    "description": "The name of the App Version you want to deploy, if not present, the last version created is picked"
                },
                "is_public_app": {
                    "type": "boolean",
                    "description": "If the Application is public or private. If not specified, we will look for a private Application"
                },
                "ip_list": {
                    "type": "array",
                    "description": "The List of IP of your user",
                    "items": {
                        "type": "string",
                        "example": "1.2.3.4"
                    }
                },
                "geo_ip_list": {
                    "type": "array",
                    "description": "The list of IP of your user with their location (latitude, longitude)",
                    "items": {
                        "$ref": "#/definitions/GeoIpListModel"
                    }
                },
                "telemetry_profile_uuid_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env_vars": {
                    "type": "array",
                    "description": "A list of deployment variables",
                    "items": {
                        "$ref": "#/definitions/DeployEnvModel"
                    }
                },
                "skip_telemetry": {
                    "type": "boolean",
                    "description": "If you want to skip the Telemetry and use a geolocations decision only",
                    "default": true
                },
                "location": {
                    "description": "If you want to specify a centroid for your deployment.",
                    "$ref": "#/definitions/LocationModel"
                },
                "city": {
                    "type": "string",
                    "description": "DEPRECATED - See `filters` instead.",
                    "example": "DEPRECATED - See `filters` instead."
                },
                "country": {
                    "type": "string",
                    "description": "DEPRECATED - See `filters` instead.",
                    "example": "DEPRECATED - See `filters` instead."
                },
                "continent": {
                    "type": "string",
                    "description": "DEPRECATED - See `filters` instead.",
                    "example": "DEPRECATED - See `filters` instead."
                },
                "region": {
                    "type": "string",
                    "description": "DEPRECATED - See `filters` instead.",
                    "example": "DEPRECATED - See `filters` instead."
                },
                "administrative_division": {
                    "type": "string",
                    "description": "DEPRECATED - See `filters` instead.",
                    "example": "DEPRECATED - See `filters` instead."
                },
                "webhook_url": {
                    "type": "string",
                    "description": "A web URL. This url will be called with method POST. The deployment status will be send in JSON format",
                    "example": "https://www.webhook.com/"
                },
                "tags": {
                    "type": "array",
                    "description": "The list of tags for your deployment",
                    "items": {
                        "type": "string",
                        "example": "production"
                    }
                },
                "container_log_storage": {
                    "description": "The container log storage options for the deployment",
                    "$ref": "#/definitions/ContainerLogStorageModel"
                },
                "filters": {
                    "type": "array",
                    "description": "Filters to use while choosing the deployment location.",
                    "items": {
                        "$ref": "#/definitions/api-model-deploymentfilter"
                    }
                },
                "ap_sort_strategy": {
                    "type": "string",
                    "description": "Algorithm used to select the edge location",
                    "example": "basic",
                    "enum": [
                        "basic",
                        "weighted"
                    ]
                },
                "command": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "Allows to override the Container command for this deployment.",
                    "example": "null, \"string\""
                },
                "arguments": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "Allows to override the Container arguments for this deployment.",
                    "example": "null, \"string\""
                }
            },
            "type": "object"
        },
        "GeoIpListModel": {
            "required": [
                "ip",
                "latitude",
                "longitude"
            ],
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude"
                }
            },
            "type": "object"
        },
        "DeployEnvModel": {
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key to retrieve the value in your instance"
                },
                "value": {
                    "type": "string",
                    "description": "The value to set in your instance"
                },
                "is_hidden": {
                    "type": "boolean",
                    "description": "If set to true, the value will be encrypted during the process of deployment"
                }
            },
            "type": "object"
        },
        "LocationModel": {
            "required": [
                "latitude",
                "longitude"
            ],
            "properties": {
                "latitude": {
                    "type": "number",
                    "description": "Latitude"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude"
                }
            },
            "type": "object"
        },
        "ContainerLogStorageModel": {
            "required": [
                "enabled"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Will override the app version container log storage for this deployment"
                },
                "endpoint_storage": {
                    "type": "string",
                    "description": "The name of your endpoint storage. If container log storage is enabled without this parameter, we will try to take the app version endpoint storage. If there is no endpoint storage in your app version, the container logs will not be stored. If we don't find any endpoint storage associated with this name, the container logs will not be stored."
                }
            },
            "type": "object"
        },
        "api-model-deploymentfilter": {
            "required": [
                "field",
                "filter_type",
                "values"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "description": "Auto Generated Field for field",
                    "example": "city",
                    "enum": [
                        "city",
                        "country",
                        "continent",
                        "region",
                        "administrative_division",
                        "location_tags"
                    ]
                },
                "values": {
                    "type": "array",
                    "description": "Auto Generated Field for values",
                    "items": {
                        "type": "string",
                        "description": "Auto Generated Field for values"
                    }
                },
                "filter_type": {
                    "type": "string",
                    "description": "Auto Generated Field for filter_type",
                    "example": "any",
                    "enum": [
                        "any",
                        "all",
                        "not"
                    ]
                }
            },
            "type": "object"
        },
        "Request": {
            "required": [
                "container_log_storage",
                "request_app",
                "request_dns",
                "request_id",
                "request_user_count",
                "request_version"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "The Unique Identifier of the request",
                    "example": "93924761ccde"
                },
                "request_dns": {
                    "type": "string",
                    "description": "The URL to connect to the instance",
                    "example": "supermario.93924761ccde.edgelab.io"
                },
                "request_app": {
                    "type": "string",
                    "description": "The Name of the App you requested",
                    "example": "supermario"
                },
                "request_version": {
                    "type": "string",
                    "description": "The name of the App Version you requested",
                    "example": "v1.0"
                },
                "request_user_count": {
                    "type": "integer",
                    "description": "How Many Users your request contain",
                    "example": 4
                },
                "city": {
                    "type": "string",
                    "description": "The city where the deployment is located"
                },
                "country": {
                    "type": "string",
                    "description": "The country where the deployment is located"
                },
                "continent": {
                    "type": "string",
                    "description": "The continent where the deployment is located"
                },
                "administrative_division": {
                    "type": "string",
                    "description": "The administrative division where the deployment is located"
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags associated with the deployment",
                    "items": {
                        "type": "string",
                        "example": "production"
                    }
                },
                "container_log_storage": {
                    "description": "The container log storage options for the deployment",
                    "$ref": "#/definitions/ContainerLogStorageModel"
                }
            },
            "type": "object"
        },
        "Deployments": {
            "properties": {
                "data": {
                    "type": "array",
                    "description": "List of active deployments",
                    "items": {
                        "$ref": "#/definitions/DeploymentListData"
                    }
                },
                "total_count": {
                    "type": "integer",
                    "description": "Total Objects in the Database"
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                },
                "message": {
                    "type": "array",
                    "description": "Extra Messages for the query",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "DeploymentListData": {
            "required": [
                "fqdn",
                "public_ip",
                "ready",
                "request_id",
                "start_time"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "2d35052ec4e9"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN that allow to connect to your deployment",
                    "example": "abc123.test.edgegap.com"
                },
                "start_time": {
                    "type": "string",
                    "description": "Timestamp of the deployment when it is up and running",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the deployment is ready",
                    "example": true
                },
                "public_ip": {
                    "type": "string",
                    "description": "The public IP",
                    "example": "100.10.0.85"
                },
                "ports": {
                    "type": "object",
                    "example": {
                        "web": {
                            "external": 31587,
                            "internal": 8080,
                            "protocol": "http",
                            "name": "web",
                            "tls_upgrade": true,
                            "link": "https://example.com:31587",
                            "proxy": 65001
                        },
                        "7777": {
                            "external": 31669,
                            "internal": 7777,
                            "protocol": "UDP",
                            "name": "7777",
                            "tls_upgrade": false,
                            "link": "example.com:31669",
                            "proxy": 65002
                        }
                    },
                    "additionalProperties": {
                        "$ref": "#/definitions/PortMapping"
                    }
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags associated with the deployment",
                    "items": {
                        "type": "string",
                        "example": "production"
                    }
                },
                "sockets": {
                    "type": "integer",
                    "description": "The capacity of the deployment",
                    "example": "5"
                },
                "sockets_usage": {
                    "type": "integer",
                    "description": "The capacity usage of the deployment",
                    "example": "2"
                },
                "is_joinable_by_session": {
                    "type": "boolean",
                    "description": "If the deployment is joinable by sessions"
                }
            },
            "type": "object"
        },
        "api-model-containerlogs": {
            "properties": {
                "logs": {
                    "type": "string",
                    "description": "Auto Generated Field for logs"
                },
                "encoding": {
                    "type": "string",
                    "description": "Auto Generated Field for encoding"
                },
                "crash_logs": {
                    "type": "string",
                    "description": "Auto Generated Field for crash_logs"
                },
                "crash_data": {
                    "$ref": "#/definitions/api-model-containercrashdata"
                },
                "logs_link": {
                    "type": "string",
                    "description": "Auto Generated Field for logs_link"
                }
            },
            "type": "object"
        },
        "api-model-containercrashdata": {
            "properties": {
                "exit_code": {
                    "type": "integer",
                    "description": "Auto Generated Field for exit_code"
                },
                "message": {
                    "type": "string",
                    "description": "Auto Generated Field for message"
                },
                "restart_count": {
                    "type": "integer",
                    "description": "Auto Generated Field for restart_count"
                }
            },
            "type": "object"
        },
        "Status": {
            "required": [
                "app_name",
                "app_version",
                "current_status",
                "elapsed_time",
                "error",
                "fqdn",
                "max_duration",
                "public_ip",
                "request_id",
                "running",
                "start_time",
                "whitelisting_active"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "The Unique ID of the Deployment's request"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN that allow to connect to your Deployment",
                    "example": "abc123.test.edgegap.com"
                },
                "app_name": {
                    "type": "string",
                    "description": "The name of the deployed App",
                    "example": "test"
                },
                "app_version": {
                    "type": "string",
                    "description": "The version of the deployed App",
                    "example": "v1"
                },
                "current_status": {
                    "type": "string",
                    "description": "The current status of the Deployment",
                    "example": "Status.DEPLOYING"
                },
                "running": {
                    "type": "boolean",
                    "description": "True if the current Deployment is ready to be connected and running",
                    "example": true
                },
                "whitelisting_active": {
                    "type": "boolean",
                    "description": "True if the current Deployment is ACL protected",
                    "example": true
                },
                "start_time": {
                    "type": "string",
                    "description": "Timestamp of the Deployment when it is up and running",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "removal_time": {
                    "type": "string",
                    "description": "Timestamp of the end of the Deployment",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "elapsed_time": {
                    "type": "integer",
                    "description": "Time since the Deployment is up and running in seconds"
                },
                "last_status": {
                    "type": "string",
                    "description": "The last status of the Deployment",
                    "example": "Status.SEEKING"
                },
                "error": {
                    "type": "boolean",
                    "description": "True if there is an error with the Deployment",
                    "example": true
                },
                "error_detail": {
                    "type": "string",
                    "description": "The error details of the Deployment"
                },
                "ports": {
                    "type": "object",
                    "example": {
                        "web": {
                            "external": 31587,
                            "internal": 8080,
                            "protocol": "http",
                            "name": "web",
                            "tls_upgrade": true,
                            "link": "https://example.com:31587",
                            "proxy": 65001
                        },
                        "7777": {
                            "external": 31669,
                            "internal": 7777,
                            "protocol": "UDP",
                            "name": "7777",
                            "tls_upgrade": false,
                            "link": "example.com:31669",
                            "proxy": 65002
                        }
                    },
                    "additionalProperties": {
                        "$ref": "#/definitions/PortMapping"
                    }
                },
                "public_ip": {
                    "type": "string",
                    "description": "The public IP",
                    "example": "100.10.0.85"
                },
                "sessions": {
                    "type": "array",
                    "description": "List of Active Sessions if Deployment App is Session Based",
                    "items": {
                        "$ref": "#/definitions/DeploymentSessionContext"
                    }
                },
                "location": {
                    "description": "Location related information",
                    "$ref": "#/definitions/DeploymentLocation"
                },
                "tags": {
                    "type": "array",
                    "description": "List of tags associated with the deployment",
                    "items": {
                        "type": "string",
                        "example": "production"
                    }
                },
                "sockets": {
                    "type": "integer",
                    "description": "The Capacity of the Deployment",
                    "example": "5"
                },
                "sockets_usage": {
                    "type": "integer",
                    "description": "The Capacity Usage of the Deployment",
                    "example": "2"
                },
                "command": {
                    "type": "string",
                    "description": "The command to use in the container, null mean it will take the default of the container"
                },
                "arguments": {
                    "type": "string",
                    "description": "The arguments to use in the container, null mean it will take the default of the container"
                },
                "max_duration": {
                    "type": "integer",
                    "description": "The deployment's maximum duration is the time, in minutes, that the deployment will remain active before automatically closing."
                }
            },
            "type": "object"
        },
        "DeploymentSessionContext": {
            "required": [
                "kind",
                "linked",
                "ready",
                "session_id",
                "status",
                "user_count"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "abc123"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of the session",
                    "example": "Status.READY"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the session is linked to a Ready deployment",
                    "example": true
                },
                "linked": {
                    "type": "boolean",
                    "description": "If the session is linked to a deployment",
                    "example": true
                },
                "kind": {
                    "type": "string",
                    "description": "Type of session created",
                    "example": "DEFAULT | SEATS | MATCH"
                },
                "user_count": {
                    "type": "integer",
                    "description": "Count of user this session currently have",
                    "example": "10"
                }
            },
            "type": "object"
        },
        "Delete": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message depending of the request termination",
                    "example": "Instance 93924761ccde will be deleted"
                },
                "deployment_summary": {
                    "description": "The status/summary of the deployment",
                    "$ref": "#/definitions/Status"
                }
            },
            "type": "object"
        },
        "DeleteRequestReceived": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message to confirm that the delete request has been received",
                    "example": "1a9e4ff02cce - Delete request will be processed soon"
                }
            },
            "type": "object"
        },
        "AppVersionDelete": {
            "properties": {
                "success": {
                    "type": "boolean",
                    "description": "If the creation happened correctly"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AppVersionList": {
            "properties": {
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionPayload"
                    }
                },
                "total_count": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "AppVersionPayload": {
            "required": [
                "docker_image",
                "docker_repository",
                "docker_tag",
                "name",
                "req_cpu",
                "req_memory"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The Version Name",
                    "minLength": 1,
                    "maxLength": 64
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the Version is active currently in the system"
                },
                "docker_repository": {
                    "type": "string",
                    "description": "The Repository where the image is (i.e. 'harbor.edgegap.com' or 'docker.io')"
                },
                "docker_image": {
                    "type": "string",
                    "description": "The name of your image (i.e. 'edgegap/demo')"
                },
                "docker_tag": {
                    "type": "string",
                    "description": "The tag of your image (i.e. '0.1.2')"
                },
                "private_username": {
                    "type": "string",
                    "description": "The username to access the docker repository"
                },
                "private_token": {
                    "type": "string",
                    "description": "The Private Password or Token of the username (We recommend to use a token)"
                },
                "req_cpu": {
                    "type": "integer",
                    "description": "Units of vCPU needed (1024 = 1vcpu)",
                    "example": 256,
                    "minimum": 100
                },
                "req_memory": {
                    "type": "integer",
                    "description": "Units of memory in MB needed (1024 = 1GB)",
                    "example": 256,
                    "minimum": 100
                },
                "req_video": {
                    "type": "integer",
                    "description": "Units of GPU needed (1024 = 1 GPU)",
                    "example": 256,
                    "minimum": 0
                },
                "max_duration": {
                    "type": "integer",
                    "description": "The Max duration of the game in minute. 0 means forever.",
                    "example": 30
                },
                "use_telemetry": {
                    "type": "boolean",
                    "description": "Allow to inject ASA Variables"
                },
                "inject_context_env": {
                    "type": "boolean",
                    "description": "DEPRECATED - The context environment variables are now injected into all deployments by default. No changes are required. (https://docs.edgegap.com/docs/deployment/injected-variables)"
                },
                "whitelisting_active": {
                    "type": "boolean",
                    "description": "ACL Protection is active",
                    "example": false
                },
                "force_cache": {
                    "type": "boolean",
                    "description": "Allow faster deployment by caching your container image in every Edge site"
                },
                "cache_min_hour": {
                    "type": "integer",
                    "description": "Start of the preferred interval for caching your container",
                    "minimum": 0,
                    "maximum": 23
                },
                "cache_max_hour": {
                    "type": "integer",
                    "description": "End of the preferred interval for caching your container",
                    "minimum": 0,
                    "maximum": 23
                },
                "time_to_deploy": {
                    "type": "integer",
                    "description": "Estimated maximum time in seconds to deploy, after this time we will consider it not working and retry.",
                    "example": 15,
                    "minimum": 15
                },
                "enable_all_locations": {
                    "type": "boolean",
                    "description": "(Deprecated) Enable every location available. By enabling this, your request will use every potential location, including those which may require a longer time to deploy. This means that your application could take significantly more time before being ready. We do not recommend this feature for live games. This functionality does not support ACL and Caching at the moment.",
                    "example": false
                },
                "session_config": {
                    "description": "Parameters defining the behavior of a session-based app version. If set, the app is considered to be session-based.",
                    "$ref": "#/definitions/AppVersionCreateSessionConfig"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionPort"
                    }
                },
                "probe": {
                    "$ref": "#/definitions/AppVersionProbe"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionEnv"
                    }
                },
                "verify_image": {
                    "type": "boolean",
                    "description": "By enabling the verify_image option, your image infos (docker_repository, docker_image, docker_tag) will be tested.",
                    "default": false
                },
                "termination_grace_period_seconds": {
                    "type": "integer",
                    "description": "Termination grace period in seconds after the SIGTERM signal has been sent",
                    "minimum": 5,
                    "maximum": 3600
                },
                "endpoint_storage": {
                    "type": "string",
                    "description": "The name of the endpoint storage to link"
                },
                "command": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "Entrypoint/Command override of your Container",
                    "example": "null, \"string\""
                },
                "arguments": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The Arguments to pass to the command",
                    "example": "null, \"string\""
                },
                "build_type": {
                    "type": "string",
                    "description": "Available Build Types: Production or Development"
                }
            },
            "type": "object"
        },
        "AppVersionCreateSessionConfig": {
            "required": [
                "kind",
                "sockets"
            ],
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "The kind of session to create. If 'Default' if chosen, the 'session_config' will be ignored. The kind of session must be: Default, Seat, Match",
                    "example": "Seat",
                    "enum": [
                        "Default",
                        "Seat",
                        "Match"
                    ]
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of game slots on each deployment of this app version.",
                    "example": 10,
                    "minimum": 1
                },
                "autodeploy": {
                    "type": "boolean",
                    "description": "If a deployment should be made autonomously if there is not enough sockets open on a new session."
                },
                "empty_ttl": {
                    "type": "integer",
                    "description": "The number of minutes a deployment of this app version can spend with no session connected before being terminated.",
                    "example": 60,
                    "minimum": 1
                },
                "session_max_duration": {
                    "type": "integer",
                    "description": "The number of minutes after a session-type deployment has been terminated to remove all the session information connected to your deployment. Minimum and default value is set to 60 minutes so you can manage your session termination before it is removed.",
                    "example": 60,
                    "minimum": 60
                }
            },
            "type": "object"
        },
        "AppVersionPort": {
            "required": [
                "port",
                "protocol"
            ],
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The Port to Expose your service. Port 0 reserved for one-to-one port mapping. See our doc for more information.",
                    "example": 5555,
                    "minimum": 0,
                    "maximum": 59999
                },
                "protocol": {
                    "type": "string",
                    "description": "Available protocols: TCP, UDP, TCP/UDP, HTTP, HTTPS, WS or WSS",
                    "example": "TCP"
                },
                "to_check": {
                    "type": "boolean",
                    "description": "If the port must be verified by our port validations",
                    "default": true
                },
                "tls_upgrade": {
                    "type": "boolean",
                    "description": "Enabling with HTTP or WS will inject a sidecar proxy that upgrades the connection with TLS",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "An optional name for the port for easier handling. Mandatory if using port 0",
                    "example": "Game port"
                }
            },
            "type": "object"
        },
        "AppVersionProbe": {
            "required": [
                "optimal_ping",
                "rejected_ping"
            ],
            "properties": {
                "optimal_ping": {
                    "type": "integer",
                    "description": "Your optimal value for Latency",
                    "example": 60,
                    "minimum": 1
                },
                "rejected_ping": {
                    "type": "integer",
                    "description": "Your reject value for Latency",
                    "example": 180,
                    "minimum": 1
                }
            },
            "type": "object"
        },
        "AppVersionEnv": {
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key where the Environment Variable will be set"
                },
                "value": {
                    "type": "string",
                    "description": "The Value to retrieve at the Key"
                },
                "is_secret": {
                    "type": "boolean",
                    "description": "This will encrypt the value in our database, won't be readable by external source"
                }
            },
            "type": "object"
        },
        "AppVersionUpdatePayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The Version Name",
                    "minLength": 1,
                    "maxLength": 64
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the Version is active currently in the system"
                },
                "docker_repository": {
                    "type": "string",
                    "description": "The Repository where the image is (i.e. 'harbor.edgegap.com' or 'docker.io')"
                },
                "docker_image": {
                    "type": "string",
                    "description": "The name of your image (i.e. 'edgegap/demo')"
                },
                "docker_tag": {
                    "type": "string",
                    "description": "The tag of your image (i.e. '0.1.2')"
                },
                "private_username": {
                    "type": "string",
                    "description": "The username to access the docker repository"
                },
                "private_token": {
                    "type": "string",
                    "description": "The Private Password or Token of the username (We recommend to use a token)"
                },
                "req_cpu": {
                    "type": "integer",
                    "description": "Units of vCPU needed (1024 = 1vcpu)",
                    "example": 256,
                    "minimum": 100
                },
                "req_memory": {
                    "type": "integer",
                    "description": "Units of memory in MB needed (1024 = 1GB)",
                    "example": 256,
                    "minimum": 100
                },
                "req_video": {
                    "type": "integer",
                    "description": "Units of GPU needed (1024= 1 GPU)",
                    "example": 256,
                    "minimum": 0
                },
                "max_duration": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The Max duration of the game",
                    "example": 30,
                    "minimum": 0
                },
                "use_telemetry": {
                    "type": "boolean",
                    "description": "Allow to inject ASA Variables"
                },
                "inject_context_env": {
                    "type": "boolean",
                    "description": "DEPRECATED - The context environment variables are now injected into all deployments by default. No changes are required. (https://docs.edgegap.com/docs/deployment/injected-variables)"
                },
                "whitelisting_active": {
                    "type": "boolean",
                    "description": "ACL Protection is active"
                },
                "force_cache": {
                    "type": "boolean",
                    "description": "Allow faster deployment by caching your container image in every Edge site"
                },
                "cache_min_hour": {
                    "type": "integer",
                    "description": "Start of the preferred interval for caching your container",
                    "minimum": 0,
                    "maximum": 23
                },
                "cache_max_hour": {
                    "type": "integer",
                    "description": "End of the preferred interval for caching your container",
                    "minimum": 0,
                    "maximum": 23
                },
                "time_to_deploy": {
                    "type": "integer",
                    "description": "Estimated maximum time in seconds to deploy, after this time we will consider it not working and retry.",
                    "example": 15,
                    "minimum": 15
                },
                "enable_all_locations": {
                    "type": "boolean",
                    "description": "(Deprecated) Enable every location available. By enabling this, your request will use every potential location, including those which may require a longer time to deploy. This means that your application may take up to 2 minutes before being up and ready. This functionality does not support ACL and Caching at the moment."
                },
                "session_config": {
                    "description": "Parameters defining the behavior of a session-based app version. If set, the app is considered to be session-based.",
                    "$ref": "#/definitions/AppVersionUpdateSessionConfig"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionPort"
                    }
                },
                "probe": {
                    "$ref": "#/definitions/AppVersionProbe"
                },
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionEnv"
                    }
                },
                "termination_grace_period_seconds": {
                    "type": "integer",
                    "description": "Termination grace period in seconds after the SIGTERM signal has been sent",
                    "minimum": 5,
                    "maximum": 3600
                },
                "verify_image": {
                    "type": "boolean",
                    "description": "By enabling the verify_image option, your image infos (docker_repository, docker_image, docker_tag) will be tested.",
                    "default": false
                },
                "endpoint_storage": {
                    "type": "string",
                    "description": "The name of the endpoint storage to link"
                },
                "command": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "Entrypoint/Command override of your Container",
                    "example": "null, \"string\""
                },
                "arguments": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The Arguments to pass to the command",
                    "example": "null, \"string\""
                },
                "build_type": {
                    "type": "string",
                    "description": "Available Build Types: Production or Development"
                }
            },
            "type": "object"
        },
        "AppVersionUpdateSessionConfig": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "The kind of session to create. If 'Default' if chosen, the application will be handled like a normal application. The kind of session must be: Default, Seat, Match",
                    "example": "Seat",
                    "enum": [
                        "Default",
                        "Seat",
                        "Match"
                    ]
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of game slots on each deployment of this app version.",
                    "example": 10,
                    "minimum": 1
                },
                "autodeploy": {
                    "type": "boolean",
                    "description": "If a deployment should be made autonomously if there is not enough sockets open on a new session."
                },
                "empty_ttl": {
                    "type": "integer",
                    "description": "The number of minutes a deployment of this app version can spend with no session connected before being terminated.",
                    "example": 60,
                    "minimum": 1
                },
                "session_max_duration": {
                    "type": "integer",
                    "description": "The number of minutes after a session-type deployment has been terminated to remove all the session information connected to your deployment. Minimum and default value is set to 60 minutes so you can manage your session termination before it is removed.",
                    "example": 60,
                    "minimum": 60
                }
            },
            "type": "object"
        },
        "AppVersionUpdateResponse": {
            "properties": {
                "success": {
                    "type": "boolean",
                    "description": "If the creation happened correctly"
                },
                "version": {
                    "$ref": "#/definitions/AppVersionPayload"
                }
            },
            "type": "object"
        },
        "AppVersionCreateResponse": {
            "properties": {
                "success": {
                    "type": "boolean",
                    "description": "If the creation happened correctly"
                },
                "version": {
                    "$ref": "#/definitions/AppVersionPayload"
                }
            },
            "type": "object"
        },
        "Applications": {
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Application"
                    }
                }
            },
            "type": "object"
        },
        "Application": {
            "required": [
                "create_time",
                "is_active",
                "last_updated",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Application name",
                    "example": "Example App"
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the application can be deployed",
                    "example": true
                },
                "is_telemetry_agent_active": {
                    "type": "boolean",
                    "description": "If the telemetry agent is installed on the versions of this app.",
                    "example": false
                },
                "image": {
                    "type": "string",
                    "description": "Image base64 string",
                    "example": "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
                },
                "create_time": {
                    "type": "string",
                    "description": "Creation date",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "last_updated": {
                    "type": "string",
                    "description": "Date of the last update",
                    "example": "2025-01-22 21:08:18.808501"
                }
            },
            "type": "object"
        },
        "ApplicationPatch": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Application name",
                    "example": "Example App",
                    "minLength": 3,
                    "maxLength": 64
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the application can be deployed",
                    "example": true
                },
                "is_telemetry_agent_active": {
                    "type": "boolean",
                    "description": "If the telemetry agent is installed on the versions of this app.",
                    "example": false
                },
                "image": {
                    "type": "string",
                    "description": "Image base64 string",
                    "example": "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
                }
            },
            "type": "object"
        },
        "ApplicationPost": {
            "required": [
                "image",
                "is_active",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The application name",
                    "example": "Example App",
                    "minLength": 1,
                    "maxLength": 64
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the application can be deployed",
                    "example": true
                },
                "is_telemetry_agent_active": {
                    "type": "boolean",
                    "description": "If the telemetry agent is installed on the versions of this app.",
                    "example": false
                },
                "image": {
                    "type": "string",
                    "description": "Image base64 string",
                    "example": "iVBORw0KGgoAAAANSUhEUg[...]AAABJRU5ErkJggg=="
                }
            },
            "type": "object"
        },
        "AppVersionWhitelistEntryPayload": {
            "required": [
                "cidr"
            ],
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "CIDR to allow",
                    "example": "1.2.3.4/16"
                },
                "label": {
                    "type": "string",
                    "description": "Label to organized your entries",
                    "example": "Matchmaker"
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the Rule will be applied on runtime"
                }
            },
            "type": "object"
        },
        "AppVersionWhitelistResponse": {
            "properties": {
                "whitelist_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppVersionWhitelistEntry"
                    }
                }
            },
            "type": "object"
        },
        "AppVersionWhitelistEntry": {
            "required": [
                "cidr",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID of the entry",
                    "example": "1"
                },
                "cidr": {
                    "type": "string",
                    "description": "CIDR to allow",
                    "example": "1.2.3.4/16"
                },
                "label": {
                    "type": "string",
                    "description": "Label to organized your entries",
                    "example": "Matchmaker"
                },
                "is_active": {
                    "type": "boolean",
                    "description": "If the Rule will be applied on runtime"
                }
            },
            "type": "object"
        },
        "AppVersionWhitelistEntrySuccess": {
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean",
                    "description": "if the operation succeed"
                },
                "whitelist_entry": {
                    "$ref": "#/definitions/AppVersionWhitelistEntry"
                }
            },
            "type": "object"
        },
        "Locations": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Location"
                    }
                },
                "messages": {
                    "type": "array",
                    "description": "Extra Messages for the query",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "Location": {
            "required": [
                "administrative_division",
                "city",
                "continent",
                "country",
                "latitude",
                "longitude",
                "timezone",
                "type"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City Name",
                    "example": "Montreal"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent Name",
                    "example": "North America"
                },
                "country": {
                    "type": "string",
                    "description": "Country name",
                    "example": "Canada"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone name",
                    "example": "Eastern Time"
                },
                "administrative_division": {
                    "type": "string",
                    "description": "Administrative Division",
                    "example": "Quebec"
                },
                "latitude": {
                    "type": "number",
                    "description": "The Latitude in decimal",
                    "example": "45.3324097"
                },
                "longitude": {
                    "type": "number",
                    "description": "The Longitude in decimal",
                    "example": "-73.2693626"
                },
                "type": {
                    "type": "string",
                    "description": "The type of location",
                    "example": "standard"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            },
            "type": "object"
        },
        "Tag": {
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag's Key"
                },
                "value": {
                    "type": "string",
                    "description": "Tag's Value"
                }
            },
            "type": "object"
        },
        "LocationBeaconList": {
            "properties": {
                "locations": {
                    "type": "array",
                    "description": "Total number of active location beacons",
                    "items": {
                        "$ref": "#/definitions/api-model-locationbeacon"
                    }
                },
                "count": {
                    "type": "integer",
                    "description": "List of active location beacons",
                    "example": 1
                }
            },
            "type": "object"
        },
        "api-model-locationbeacon": {
            "required": [
                "host",
                "location"
            ],
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The URL of the pingable location."
                },
                "fqdn": {
                    "type": "string",
                    "description": "Auto Generated Field for fqdn"
                },
                "udp_port": {
                    "type": "integer",
                    "description": "The open UDP port number for UDP pings, if available."
                },
                "tcp_port": {
                    "type": "integer",
                    "description": "The open TCP port number for TCP pings, if available."
                },
                "location": {
                    "$ref": "#/definitions/api-model-location"
                }
            },
            "type": "object"
        },
        "api-model-location": {
            "required": [
                "administrative_division",
                "city",
                "continent",
                "country",
                "latitude",
                "longitude",
                "timezone"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City of the object"
                },
                "country": {
                    "type": "string",
                    "description": "Country of the object"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent of the object"
                },
                "administrative_division": {
                    "type": "string",
                    "description": "Administrative division of the object"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone of the object"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude of the object"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude of the object"
                }
            },
            "type": "object"
        },
        "SessionBulkStopPayload": {
            "required": [
                "filters"
            ],
            "properties": {
                "filters": {
                    "type": "array",
                    "description": "Filters used to match with sessions",
                    "items": {
                        "$ref": "#/definitions/SessionBulkStopFiltersPayload"
                    }
                }
            },
            "type": "object"
        },
        "SessionBulkStopFiltersPayload": {
            "required": [
                "field",
                "filter_type",
                "values"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The field on which to apply the filter",
                    "example": "session_id",
                    "enum": [
                        "session_id",
                        "deployment_tags",
                        "request_id"
                    ]
                },
                "values": {
                    "type": "array",
                    "description": "Values that will be used for the filter",
                    "items": {
                        "type": "string"
                    }
                },
                "filter_type": {
                    "type": "string",
                    "description": "Types of filter used. Possible values are: ['any', 'all', 'not']",
                    "example": "any",
                    "enum": [
                        "any",
                        "all",
                        "not"
                    ]
                }
            },
            "type": "object"
        },
        "SessionBulkStopResponse": {
            "required": [
                "processable"
            ],
            "properties": {
                "processable": {
                    "type": "array",
                    "description": "A list sessions that can be processed to be stopped",
                    "items": {
                        "$ref": "#/definitions/SessionStopResponse"
                    }
                }
            },
            "type": "object"
        },
        "SessionStopResponse": {
            "required": [
                "session_id"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "The id of the request for a deployment"
                }
            },
            "type": "object"
        },
        "SessionGet": {
            "required": [
                "app_version",
                "create_time",
                "elapsed",
                "kind",
                "linked",
                "ready",
                "session_id",
                "status",
                "user_count"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "abc123-s"
                },
                "custom_id": {
                    "type": "string",
                    "description": "Custom ID if Available",
                    "example": "custom-abc123"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of the session",
                    "example": "Status.READY"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the session is linked to a ready deployment",
                    "example": true
                },
                "linked": {
                    "type": "boolean",
                    "description": "If the session is linked to a deployment",
                    "example": true
                },
                "kind": {
                    "type": "string",
                    "description": "Type of session created",
                    "example": "DEFAULT | SEATS | MATCH"
                },
                "user_count": {
                    "type": "integer",
                    "description": "Count of user this session currently have",
                    "example": "10"
                },
                "app_version": {
                    "type": "integer",
                    "description": "App version linked to the session"
                },
                "create_time": {
                    "type": "string",
                    "description": "Session created at",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "elapsed": {
                    "type": "integer",
                    "description": "Elapsed time"
                },
                "error": {
                    "type": "string",
                    "description": "Error Detail"
                },
                "session_users": {
                    "type": "array",
                    "description": "Users in the session",
                    "items": {
                        "$ref": "#/definitions/SessionUser"
                    }
                },
                "session_ips": {
                    "type": "array",
                    "description": "IPS in the session",
                    "items": {
                        "$ref": "#/definitions/SessionUser"
                    }
                },
                "deployment": {
                    "$ref": "#/definitions/Deployment"
                },
                "webhook_url": {
                    "type": "string",
                    "description": "When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url "
                }
            },
            "type": "object"
        },
        "SessionUser": {
            "required": [
                "ip"
            ],
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "Ip of the user connected to the Session",
                    "example": "1.2.3.4"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude"
                }
            },
            "type": "object"
        },
        "SessionDelete": {
            "required": [
                "message",
                "session_id"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message depending of the request termination",
                    "example": "Instance 93924761ccde will be deleted"
                },
                "session_id": {
                    "type": "string",
                    "description": "The Unique Identifier of the Session",
                    "example": "abc123-s"
                },
                "custom_id": {
                    "type": "string",
                    "description": "Custom ID if Available",
                    "example": "custom-abc123"
                }
            },
            "type": "object"
        },
        "SessionModel": {
            "required": [
                "app_name"
            ],
            "properties": {
                "app_name": {
                    "type": "string",
                    "description": "The Name of the App you want to deploy, example: \n\n\tsupermario"
                },
                "version_name": {
                    "type": "string",
                    "description": "The Name of the App Version you want to deploy, example: \n\n\tv1.0"
                },
                "ip_list": {
                    "type": "array",
                    "description": "The List of IP of your user, Array of String, example: \n\n\t [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"]",
                    "items": {
                        "type": "string",
                        "example": "1.2.3.4"
                    }
                },
                "geo_ip_list": {
                    "type": "array",
                    "description": "The list of IP of your user with their location (latitude, longitude)",
                    "items": {
                        "$ref": "#/definitions/GeoIpListModel"
                    }
                },
                "deployment_request_id": {
                    "type": "string",
                    "description": "The request id of your deployment. If specified, the session will link to the deployment"
                },
                "location": {
                    "description": "If you want to specify a centroid for your session.",
                    "$ref": "#/definitions/LocationModel"
                },
                "city": {
                    "type": "string",
                    "description": "If you want your session in a specific city",
                    "example": "Montreal"
                },
                "country": {
                    "type": "string",
                    "description": "If you want your session in a specific country",
                    "example": "Canada"
                },
                "continent": {
                    "type": "string",
                    "description": "If you want your session in a specific continent",
                    "example": "North America"
                },
                "administrative_division": {
                    "type": "string",
                    "description": "If you want your session in a specific administrative division",
                    "example": "Quebec"
                },
                "region": {
                    "type": "string",
                    "description": "If you want your session in a specific region"
                },
                "selectors": {
                    "type": "array",
                    "description": "List of Selectors to filter potential Deployment to link and tag the Session",
                    "items": {
                        "$ref": "#/definitions/SelectorModel"
                    }
                },
                "webhook_url": {
                    "type": "string",
                    "description": "When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url "
                },
                "filters": {
                    "type": "array",
                    "description": "List of location filters to apply to the session",
                    "items": {
                        "$ref": "#/definitions/SessionFilterModel"
                    }
                },
                "skip_telemetry": {
                    "type": "boolean",
                    "description": "If system should skip the telemetry and use GeoBase decision only"
                }
            },
            "type": "object"
        },
        "SelectorModel": {
            "required": [
                "tag"
            ],
            "properties": {
                "tag": {
                    "type": "string",
                    "description": "The Tag to filter potential Deployment with this Selector",
                    "minLength": 1,
                    "maxLength": 20
                },
                "tag_only": {
                    "type": "boolean",
                    "description": "If True, will not try to filter Deployment and only tag the Session",
                    "default": false
                },
                "env": {
                    "description": "Environment Variable to inject in new Deployment created by App Version with auto-deploy",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SelectorEnvModel"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "SelectorEnvModel": {
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key to inject in the Deployment Environment Variable for this Selector",
                    "minLength": 1,
                    "maxLength": 255
                },
                "value": {
                    "type": "string",
                    "description": "The Value to inject in the Deployment Environment Variable for this Selector",
                    "minLength": 1,
                    "maxLength": 1024
                }
            },
            "type": "object"
        },
        "SessionFilterModel": {
            "required": [
                "field",
                "filter_type",
                "values"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The field to filter"
                },
                "values": {
                    "type": "array",
                    "description": "The values to filter",
                    "items": {
                        "type": "string"
                    }
                },
                "filter_type": {
                    "type": "string",
                    "description": "The type of filter",
                    "example": "any",
                    "enum": [
                        "any",
                        "all",
                        "not"
                    ]
                }
            },
            "type": "object"
        },
        "SessionRequest": {
            "required": [
                "app",
                "session_id",
                "version"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "The Unique Identifier of the Session",
                    "example": "abc123-s"
                },
                "custom_id": {
                    "type": "string",
                    "description": "Custom ID if Available",
                    "example": "custom-abc123"
                },
                "app": {
                    "type": "string",
                    "description": "The Name of the App you requested",
                    "example": "demo"
                },
                "version": {
                    "type": "string",
                    "description": "The name of the App Version you requested",
                    "example": "v1.0"
                },
                "deployment_request_id": {
                    "type": "string",
                    "description": "Unique UUID"
                },
                "selectors": {
                    "type": "array",
                    "description": "List of Selectors to filter potential Deployment to link and tag the Session",
                    "items": {
                        "$ref": "#/definitions/SelectorModel"
                    }
                },
                "webhook_url": {
                    "type": "string",
                    "description": "When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url "
                }
            },
            "type": "object"
        },
        "PatchSessionModel": {
            "required": [
                "ip_list"
            ],
            "properties": {
                "ip_list": {
                    "type": "array",
                    "description": "The List of IP of your user, Array of String, example: \n\n\t [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"]",
                    "items": {
                        "type": "string",
                        "example": "1.2.3.4"
                    }
                }
            },
            "type": "object"
        },
        "SessionUserContext": {
            "required": [
                "session_users"
            ],
            "properties": {
                "session_users": {
                    "type": "array",
                    "description": "Users in the session",
                    "items": {
                        "$ref": "#/definitions/SessionUser"
                    }
                }
            },
            "type": "object"
        },
        "Sessions": {
            "properties": {
                "data": {
                    "type": "array",
                    "description": "List of Active Sessions",
                    "items": {
                        "$ref": "#/definitions/SessionContext"
                    }
                },
                "total_count": {
                    "type": "integer",
                    "description": "Total Session in the Database"
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "SessionContext": {
            "required": [
                "kind",
                "linked",
                "ready",
                "session_id",
                "status",
                "user_count"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "abc123-s"
                },
                "custom_id": {
                    "type": "string",
                    "description": "Custom ID if Available",
                    "example": "custom-abc123"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of the session",
                    "example": "Status.READY"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the session is linked to a Ready deployment",
                    "example": true
                },
                "linked": {
                    "type": "boolean",
                    "description": "If the session is linked to a deployment",
                    "example": true
                },
                "kind": {
                    "type": "string",
                    "description": "Type of session created",
                    "example": "DEFAULT | SEATS | MATCH"
                },
                "user_count": {
                    "type": "integer",
                    "description": "Count of user this session currently have",
                    "example": "10"
                },
                "deployment_request_id": {
                    "type": "string",
                    "description": "Unique UUID",
                    "example": "abc123"
                },
                "webhook_url": {
                    "type": "string",
                    "description": "When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url "
                }
            },
            "type": "object"
        },
        "MetricsResponse": {
            "properties": {
                "total": {
                    "$ref": "#/definitions/TotalMetricsModel"
                },
                "cpu": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "mem": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "network": {
                    "$ref": "#/definitions/NetworkMetricsModel"
                }
            },
            "type": "object"
        },
        "TotalMetricsModel": {
            "properties": {
                "receive_total": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "transmit_total": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "disk_read_total": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "disk_write_total": {
                    "$ref": "#/definitions/MetricsModel"
                }
            },
            "type": "object"
        },
        "MetricsModel": {
            "properties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "00:00:00"
                    }
                },
                "datasets": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "example": "2458"
                    }
                },
                "timestamps": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date",
                        "example": "2021-07-14 14:17:37.711"
                    }
                }
            },
            "type": "object"
        },
        "NetworkMetricsModel": {
            "properties": {
                "receive": {
                    "$ref": "#/definitions/MetricsModel"
                },
                "transmit": {
                    "$ref": "#/definitions/MetricsModel"
                }
            },
            "type": "object"
        },
        "MatchmakerListResponse": {
            "required": [
                "count",
                "data"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Number of matchmakers owned by the user."
                },
                "data": {
                    "type": "array",
                    "items": {
                        "description": "List of the user's matchmakers.",
                        "$ref": "#/definitions/MatchmakerResponse"
                    }
                }
            },
            "type": "object"
        },
        "MatchmakerResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseModel"
                },
                {
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the Matchmaker."
                        },
                        "url": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "URL of the Matchmaker.",
                            "example": "null, \"string\""
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "BaseModel": {
            "required": [
                "created_at",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-22 21:08:18.808501"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-22 21:08:18.808501"
                }
            },
            "type": "object"
        },
        "MatchmakerUpdate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Matchmaker."
                }
            },
            "type": "object"
        },
        "MatchmakerCreate": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Matchmaker."
                }
            },
            "type": "object"
        },
        "MatchmakerComponentListResponse": {
            "required": [
                "count",
                "data"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Number of matchmaker components owned by the user."
                },
                "data": {
                    "description": "List of the user's matchmaker components.",
                    "$ref": "#/definitions/MatchmakerComponentResponse"
                }
            },
            "type": "object"
        },
        "MatchmakerComponentResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseModel"
                },
                {
                    "required": [
                        "credentials",
                        "image",
                        "name",
                        "repository",
                        "tag"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Matchmaker component name. Must be unique."
                        },
                        "repository": {
                            "type": "string",
                            "description": "Container repository where the component's image is hosted."
                        },
                        "image": {
                            "type": "string",
                            "description": "Container image to use for this component."
                        },
                        "tag": {
                            "type": "string",
                            "description": "Tag of the container image to use for this component."
                        },
                        "credentials": {
                            "description": "Private repo credentials to use for pulling the image, if applicable.",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ComponentCredentials"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "ComponentCredentials": {
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Username for the component's private repository."
                },
                "token": {
                    "type": "string",
                    "description": "Password (token) of the component's private repository."
                }
            },
            "type": "object"
        },
        "MatchmakerComponentUpdate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Matchmaker component name. Must be unique."
                },
                "repository": {
                    "type": "string",
                    "description": "Container repository where the component's image is hosted."
                },
                "image": {
                    "type": "string",
                    "description": "Container image to use for this component."
                },
                "tag": {
                    "type": "string",
                    "description": "Tag of the container image to use for this component."
                },
                "credentials": {
                    "description": "Private repo credentials to use for pulling the image, if applicable.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ComponentCredentials"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "MatchmakerComponentCreate": {
            "required": [
                "image",
                "name",
                "repository",
                "tag"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Matchmaker component name. Must be unique."
                },
                "repository": {
                    "type": "string",
                    "description": "Container repository where the component's image is hosted."
                },
                "image": {
                    "type": "string",
                    "description": "Container image to use for this component."
                },
                "tag": {
                    "type": "string",
                    "description": "Tag of the container image to use for this component."
                },
                "credentials": {
                    "description": "Private repo credentials to use for pulling the image, if applicable.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ComponentCredentials"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "MatchmakerComponentEnvListResponse": {
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Number of matchmaker component envs for the component."
                },
                "data": {
                    "type": "array",
                    "items": {
                        "description": "List of the matchmaker component's envs.",
                        "$ref": "#/definitions/MatchmakerComponentEnvsResponse"
                    }
                }
            },
            "type": "object"
        },
        "MatchmakerComponentEnvsResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseModel"
                },
                {
                    "required": [
                        "key",
                        "value"
                    ],
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "Name of the ENV variable."
                        },
                        "value": {
                            "type": "string",
                            "description": "Value of the ENV variable."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerComponentEnvsUpdate": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the ENV variable."
                },
                "value": {
                    "type": "string",
                    "description": "Value of the ENV variable."
                }
            },
            "type": "object"
        },
        "MatchmakerComponentEnvsCreate": {
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of the ENV variable."
                },
                "value": {
                    "type": "string",
                    "description": "Value of the ENV variable."
                }
            },
            "type": "object"
        },
        "MatchmakerManagedReleaseUpdate": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseUpdateBase"
                },
                {
                    "properties": {
                        "release_config_name": {
                            "type": "string",
                            "description": "Name of the matchmaker release configuration to use for this managed release."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseUpdateBase": {
            "properties": {
                "version": {
                    "type": "string",
                    "description": "Name of the matchmaker release. Should be unique, and will be used to differentiate your releases."
                }
            },
            "type": "object"
        },
        "MatchmakerManagedReleaseResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseResponseBase"
                },
                {
                    "required": [
                        "release_config_name"
                    ],
                    "properties": {
                        "release_config_name": {
                            "type": "string",
                            "description": "Name of the matchmaker release configuration to use for this managed release."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseResponseBase": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseModel"
                },
                {
                    "required": [
                        "app_name",
                        "version",
                        "version_name"
                    ],
                    "properties": {
                        "app_name": {
                            "type": "string",
                            "description": "Name of the app to deploy using the matchmaker."
                        },
                        "version_name": {
                            "type": "string",
                            "description": "Name of the version of the specified app to deploy using the matchmaker."
                        },
                        "version": {
                            "type": "string",
                            "description": "Name of the matchmaker release. Should be unique, and will be used to differentiate your releases."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerManagedReleaseCreate": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseCreateBase"
                },
                {
                    "required": [
                        "release_config_name"
                    ],
                    "properties": {
                        "release_config_name": {
                            "type": "string",
                            "description": "Name of the matchmaker release configuration to use for this managed release."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseCreateBase": {
            "required": [
                "version"
            ],
            "properties": {
                "version": {
                    "type": "string",
                    "description": "Name of the matchmaker release. Should be unique, and will be used to differentiate your releases."
                }
            },
            "type": "object"
        },
        "MatchmakerReleaseUpdate": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseUpdateBase"
                },
                {
                    "properties": {
                        "frontend_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match frontend."
                        },
                        "director_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match director."
                        },
                        "match_function_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match match function."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseResponseBase"
                },
                {
                    "required": [
                        "director_component_name",
                        "frontend_component_name",
                        "match_function_component_name"
                    ],
                    "properties": {
                        "frontend_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match frontend."
                        },
                        "director_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match director."
                        },
                        "match_function_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match match function."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseCreate": {
            "allOf": [
                {
                    "$ref": "#/definitions/MatchmakerReleaseCreateBase"
                },
                {
                    "required": [
                        "director_component_name",
                        "frontend_component_name",
                        "match_function_component_name"
                    ],
                    "properties": {
                        "frontend_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match frontend."
                        },
                        "director_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match director."
                        },
                        "match_function_component_name": {
                            "type": "string",
                            "description": "Name of the matchmaker component to use as the Open Match match function."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseConfigUpdate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Matchmaker configuration name. Must be unique."
                },
                "configuration": {
                    "type": "string",
                    "description": "Matchmaker configuration, parsed as a string."
                }
            },
            "type": "object"
        },
        "MatchmakerReleaseConfigResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseModel"
                },
                {
                    "required": [
                        "configuration",
                        "name"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Matchmaker configuration name. Must be unique."
                        },
                        "configuration": {
                            "type": "string",
                            "description": "Matchmaker configuration, parsed as a string."
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "MatchmakerReleaseConfigCreate": {
            "required": [
                "configuration",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Matchmaker configuration name. Must be unique."
                },
                "configuration": {
                    "type": "string",
                    "description": "Matchmaker configuration, parsed as a string."
                }
            },
            "type": "object"
        },
        "ActiveDeploymentTelemetryRequest": {
            "required": [
                "deployments",
                "ips"
            ],
            "properties": {
                "deployments": {
                    "type": "array",
                    "description": "List of Deployment request ID to get telemetry.",
                    "items": {
                        "type": "string"
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "1.1.1.1"
                    }
                },
                "webhook_url": {
                    "type": "string",
                    "description": "Webhook URL that we should call to send the telemetry response back."
                }
            },
            "type": "object"
        },
        "ActiveDeploymentTelemetryResponse": {
            "required": [
                "expire",
                "retrieval_key"
            ],
            "properties": {
                "retrieval_key": {
                    "type": "string",
                    "description": "Unique retrieval key to get the telemetry response."
                },
                "expire": {
                    "type": "string",
                    "description": "Expiration date of the retrieval key.",
                    "example": "2025-01-22 21:08:18.808501"
                }
            },
            "type": "object"
        },
        "ActiveDeploymentTelemetryGetResult": {
            "required": [
                "partial_result",
                "retrieval_key",
                "scores"
            ],
            "properties": {
                "retrieval_key": {
                    "type": "string",
                    "description": "Unique retrieval key to get the telemetry response."
                },
                "scores": {
                    "type": "array",
                    "description": "Result sorted by best score. Index 0 is the best one.",
                    "items": {
                        "$ref": "#/definitions/ActiveDeploymentTelemetryScore"
                    }
                },
                "partial_result": {
                    "type": "boolean",
                    "description": "If the score list is incomplete and missing request IDs. Can occur if you request the results before we receive telemetry from every deployment."
                }
            },
            "type": "object"
        },
        "ActiveDeploymentTelemetryScore": {
            "required": [
                "request_id"
            ],
            "properties": {
                "request_id": {
                    "type": "string",
                    "description": "The request ID of the tested deployment"
                }
            },
            "type": "object"
        },
        "IPAddressResponse": {
            "required": [
                "public_ip"
            ],
            "properties": {
                "public_ip": {
                    "type": "string",
                    "description": "Public IP Address",
                    "example": "174.91.204.75"
                }
            },
            "type": "object"
        },
        "IPAddressLookupResponse": {
            "required": [
                "ip_address"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "description": "IP address type",
                    "example": "ipv4"
                },
                "ip_address": {
                    "type": "string",
                    "description": "IP address",
                    "example": "1.1.1.1"
                },
                "location": {
                    "$ref": "#/definitions/IPAddressLookupLocation"
                }
            },
            "type": "object"
        },
        "IPAddressLookupLocation": {
            "properties": {
                "continent": {
                    "$ref": "#/definitions/IPAddressLookupLocationContinent"
                },
                "country": {
                    "$ref": "#/definitions/IPAddressLookupLocationCountry"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude",
                    "example": "45.4215"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude",
                    "example": "-75.6972"
                }
            },
            "type": "object"
        },
        "IPAddressLookupLocationContinent": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Continent code",
                    "example": "AF"
                },
                "name": {
                    "type": "string",
                    "description": "Continent name",
                    "example": "Africa"
                }
            },
            "type": "object"
        },
        "IPAddressLookupLocationCountry": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Country code",
                    "example": "CA"
                },
                "name": {
                    "type": "string",
                    "description": "Country name",
                    "example": "Canada"
                }
            },
            "type": "object"
        },
        "IPAddressesLookupPayload": {
            "required": [
                "addresses"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "description": "IP Addresses",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "IPAddressesLookupResponse": {
            "required": [
                "addresses"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "description": "IP Addresses",
                    "items": {
                        "$ref": "#/definitions/IPAddressLookupResponse"
                    }
                }
            },
            "type": "object"
        },
        "FleetPoliciesGetResponse": {
            "required": [
                "data",
                "enabled",
                "maximum",
                "minimum",
                "name",
                "threshold",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Policy"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Policy is enabled. Defaults to true.",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Policy. See our documentation for more information on the type and it's data.",
                    "example": "Location",
                    "enum": [
                        "Location",
                        "Tag",
                        "Coordinates"
                    ]
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum deployments at all time",
                    "example": 1,
                    "minimum": 1
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum deployments for the provided type.",
                    "example": 1,
                    "minimum": 1
                },
                "threshold": {
                    "type": "number",
                    "description": "Based on the number of sockets connected, how filled should a session deployment be before initiating a scale-up deployment. Float between 0.1 and 1.",
                    "default": 0.9,
                    "minimum": 0.1,
                    "maximum": 1
                },
                "data": {
                    "type": "object",
                    "description": "JSON object for your filters. See our documentation for more information.",
                    "example": {
                        "filters": [
                            {
                                "field": "city",
                                "values": [
                                    "string"
                                ],
                                "filter_type": "any"
                            }
                        ]
                    }
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of policy creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of policy last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "HorizontalScalerConstraintList": {
            "properties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FleetPoliciesGetResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "FleetPoliciesPatchPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Policy"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Policy is enabled. Defaults to true.",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Policy. See our documentation for more information on the type and it's data.",
                    "example": "Location",
                    "enum": [
                        "Location",
                        "Tag",
                        "Coordinates"
                    ]
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum deployments at all time",
                    "example": 1,
                    "minimum": 0
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum deployments for the provided type.",
                    "example": 1,
                    "minimum": 1
                },
                "threshold": {
                    "type": "number",
                    "description": "Based on the number of sockets connected, how filled should a session deployment be before initiating a scale-up deployment. Float between 0.1 and 1.",
                    "example": 0.9,
                    "minimum": 0.1,
                    "maximum": 1
                },
                "data": {
                    "type": "object",
                    "description": "JSON object for your filters. See our documentation for more information.",
                    "example": {
                        "filters": [
                            {
                                "field": "city",
                                "values": [
                                    "string"
                                ],
                                "filter_type": "any"
                            }
                        ]
                    }
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of policy creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of policy last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "FleetPoliciesPostPayload": {
            "required": [
                "data",
                "enabled",
                "maximum",
                "minimum",
                "name",
                "threshold",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Policy"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Policy is enabled. Defaults to true.",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Policy. See our documentation for more information on the type and it's data.",
                    "example": "Location",
                    "enum": [
                        "Location",
                        "Tag",
                        "Coordinates"
                    ]
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum deployments at all time",
                    "example": 1,
                    "minimum": 1
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum deployments for the provided type.",
                    "example": 1,
                    "minimum": 1
                },
                "threshold": {
                    "type": "number",
                    "description": "Based on the number of sockets connected, how filled should a session deployment be before initiating a scale-up deployment. Float between 0.1 and 1.",
                    "default": 0.9,
                    "minimum": 0.1,
                    "maximum": 1
                },
                "data": {
                    "type": "object",
                    "description": "JSON object for your filters. See our documentation for more information.",
                    "example": {
                        "filters": [
                            {
                                "field": "city",
                                "values": [
                                    "string"
                                ],
                                "filter_type": "any"
                            }
                        ]
                    }
                }
            },
            "type": "object"
        },
        "FleetPoliciesPostResponse": {
            "required": [
                "data",
                "enabled",
                "maximum",
                "minimum",
                "name",
                "threshold",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Policy"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Policy is enabled. Defaults to true.",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Policy. See our documentation for more information on the type and it's data.",
                    "example": "Location",
                    "enum": [
                        "Location",
                        "Tag",
                        "Coordinates"
                    ]
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum deployments at all time",
                    "example": 1,
                    "minimum": 1
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum deployments for the provided type.",
                    "example": 1,
                    "minimum": 1
                },
                "threshold": {
                    "type": "number",
                    "description": "Based on the number of sockets connected, how filled should a session deployment be before initiating a scale-up deployment. Float between 0.1 and 1.",
                    "default": 0.9,
                    "minimum": 0.1,
                    "maximum": 1
                },
                "data": {
                    "type": "object",
                    "description": "JSON object for your filters. See our documentation for more information.",
                    "example": {
                        "filters": [
                            {
                                "field": "city",
                                "values": [
                                    "string"
                                ],
                                "filter_type": "any"
                            }
                        ]
                    }
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of policy creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of policy last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "FleetDeleteResponse": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Success Message"
                }
            },
            "type": "object"
        },
        "FleetGetResponse": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Fleet"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Fleet is enabled. Defaults to false.",
                    "default": false
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of fleet creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of fleet last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "HorizontalScalerAppVersionLink": {
            "required": [
                "app",
                "app_version",
                "fleet"
            ],
            "properties": {
                "app": {
                    "type": "string",
                    "description": "Name of the linked app of the linked version"
                },
                "app_version": {
                    "type": "string",
                    "description": "Name of the linked app version."
                },
                "fleet": {
                    "type": "string",
                    "description": "Name of the fleet the app version is linked to."
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of link creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of link last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "FleetList": {
            "properties": {
                "fleets": {
                    "type": "array",
                    "description": "List of Fleets",
                    "items": {
                        "$ref": "#/definitions/FleetGetResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "FleetPatchPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Fleet"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Fleet is enabled"
                }
            },
            "type": "object"
        },
        "FleetPatchResponse": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Fleet"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Fleet is enabled"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of fleet creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of fleet last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "FleetPostPayload": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Fleet"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Fleet is enabled. Defaults to false.",
                    "default": false
                }
            },
            "type": "object"
        },
        "FleetPostResponse": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Fleet"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If the Fleet is enabled. Defaults to false.",
                    "default": false
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of fleet creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of fleet last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "EndpointStorageDeleteResponse": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Success Message"
                }
            },
            "type": "object"
        },
        "EndpointStorageGetResponse": {
            "required": [
                "access_key_id",
                "bucket",
                "endpoint",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Endpoint Storage"
                },
                "access_key_id": {
                    "type": "string",
                    "description": "Your access key ID to connect to your S3 Bucket."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Full URL to your S3 Bucket with https or http. It's recommended to not include your bucket name as a subdomain",
                    "example": "https://us-east-1.your-s3-provider.com"
                },
                "bucket": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted."
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of endpoint storage creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of endpoint storage last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "EndpointStorageListResponse": {
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EndpointStorageGetResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "EndpointStoragePatchPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Endpoint Storage"
                },
                "access_key_id": {
                    "type": "string",
                    "description": "Your access key ID to connect to your S3 Bucket."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Full URL to your S3 Bucket with https or http. It's recommended to not include your bucket name as a subdomain",
                    "example": "https://us-east-1.your-s3-provider.com"
                },
                "bucket": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted."
                },
                "secret_access_key": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted."
                }
            },
            "type": "object"
        },
        "EndpointStoragePatchResponse": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Endpoint Storage"
                },
                "access_key_id": {
                    "type": "string",
                    "description": "Your access key ID to connect to your S3 Bucket."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Full URL to your S3 Bucket with https or http. It's recommended to not include your bucket name as a subdomain",
                    "example": "https://us-east-1.your-s3-provider.com"
                },
                "bucket": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted."
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of endpoint storage creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of endpoint storage last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "EndpointStoragePostPayload": {
            "required": [
                "access_key_id",
                "bucket",
                "endpoint",
                "name",
                "secret_access_key"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Endpoint Storage"
                },
                "access_key_id": {
                    "type": "string",
                    "description": "Your access key ID to connect to your S3 Bucket."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Full URL to your S3 Bucket with https or http. It's recommended to not include your bucket name as a subdomain",
                    "example": "https://us-east-1.your-s3-provider.com"
                },
                "bucket": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted.",
                    "example": "The Bucket name you want your container logs to be stored in."
                },
                "secret_access_key": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted."
                }
            },
            "type": "object"
        },
        "EndpointStoragePostResponse": {
            "required": [
                "access_key_id",
                "bucket",
                "endpoint",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Endpoint Storage"
                },
                "access_key_id": {
                    "type": "string",
                    "description": "Your access key ID to connect to your S3 Bucket."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Full URL to your S3 Bucket with https or http. It's recommended to not include your bucket name as a subdomain",
                    "example": "https://us-east-1.your-s3-provider.com"
                },
                "bucket": {
                    "type": "string",
                    "description": "Your secret access key to connect to your S3 Bucket. Will be encrypted.",
                    "example": "The Bucket name you want your container logs to be stored in."
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of endpoint creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of endpoint last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "PullProfileAppVersionLinkResponse": {
            "required": [
                "app",
                "app_version",
                "endpoint",
                "pull_profile"
            ],
            "properties": {
                "app": {
                    "type": "string",
                    "description": "Name of the linked app of the linked version"
                },
                "app_version": {
                    "type": "string",
                    "description": "Name of the linked app version."
                },
                "endpoint": {
                    "type": "string",
                    "description": "Name of the endpoint storage"
                },
                "pull_profile": {
                    "type": "string",
                    "description": "Name of the pull profile the app version is linked to."
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of link creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of link last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "PullProfileGetResponse": {
            "required": [
                "destination",
                "name",
                "source",
                "source_type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the pull profile"
                },
                "source": {
                    "type": "string",
                    "description": "Source in the S3 bucket to fetch from",
                    "example": "/my-bucket/config.cfg"
                },
                "source_type": {
                    "type": "string",
                    "description": "If the source is a File or a Directory",
                    "example": "File",
                    "enum": [
                        "File",
                        "Folder"
                    ]
                },
                "destination": {
                    "type": "string",
                    "description": "Destination path where your source will be uploaded in your container. Make sure to avoid protected destinations, such as `/etc/`, as this will prevent the files from being copied to your deployment, and will make your deployment fail. Make sure a normal user can write to the destination folder.",
                    "example": "/usr/share/configs"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of pull profile creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of pull profile last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "PullProfilesListResponse": {
            "properties": {
                "pull_profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PullProfileGetResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "PullProfilePatchPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the pull profile"
                },
                "source": {
                    "type": "string",
                    "description": "Source in the S3 bucket to fetch from",
                    "example": "/my-bucket/config.cfg"
                },
                "source_type": {
                    "type": "string",
                    "description": "If the source is a File or a Directory",
                    "example": "File",
                    "enum": [
                        "File",
                        "Folder"
                    ]
                },
                "destination": {
                    "type": "string",
                    "description": "Destination path where your source will be uploaded in your container. Make sure to avoid protected destinations, such as `/etc/`, as this will prevent the files from being copied to your deployment, and will make your deployment fail. Make sure a normal user can write to the destination folder.",
                    "example": "/usr/share/configs"
                }
            },
            "type": "object"
        },
        "PulloProfilePatchResponse": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the pull profile"
                },
                "source": {
                    "type": "string",
                    "description": "Source in the S3 bucket to fetch from",
                    "example": "/my-bucket/config.cfg"
                },
                "source_type": {
                    "type": "string",
                    "description": "If the source is a File or a Directory",
                    "example": "File",
                    "enum": [
                        "File",
                        "Folder"
                    ]
                },
                "destination": {
                    "type": "string",
                    "description": "Destination path where your source will be uploaded in your container. Make sure to avoid protected destinations, such as `/etc/`, as this will prevent the files from being copied to your deployment, and will make your deployment fail. Make sure a normal user can write to the destination folder.",
                    "example": "/usr/share/configs"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of pull profile creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of pull profile last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "PullProfilePostPayload": {
            "required": [
                "destination",
                "name",
                "source",
                "source_type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the pull profile"
                },
                "source": {
                    "type": "string",
                    "description": "Source in the S3 bucket to fetch from",
                    "example": "/my-bucket/config.cfg"
                },
                "source_type": {
                    "type": "string",
                    "description": "If the source is a File or a Directory",
                    "example": "File",
                    "enum": [
                        "File",
                        "Folder"
                    ]
                },
                "destination": {
                    "type": "string",
                    "description": "Destination path where your source will be uploaded in your container. Make sure to avoid protected destinations, such as `/etc/`, as this will prevent the files from being copied to your deployment, and will make your deployment fail. Make sure a normal user can write to the destination folder.",
                    "example": "/usr/share/configs"
                }
            },
            "type": "object"
        },
        "PullProfilePostResponse": {
            "required": [
                "destination",
                "name",
                "source",
                "source_type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the pull profile"
                },
                "source": {
                    "type": "string",
                    "description": "Source in the S3 bucket to fetch from",
                    "example": "/my-bucket/config.cfg"
                },
                "source_type": {
                    "type": "string",
                    "description": "If the source is a File or a Directory",
                    "example": "File",
                    "enum": [
                        "File",
                        "Folder"
                    ]
                },
                "destination": {
                    "type": "string",
                    "description": "Destination path where your source will be uploaded in your container. Make sure to avoid protected destinations, such as `/etc/`, as this will prevent the files from being copied to your deployment, and will make your deployment fail. Make sure a normal user can write to the destination folder.",
                    "example": "/usr/share/configs"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of pull profile creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of pull profile last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "RelaySessionCreatePayload": {
            "required": [
                "users"
            ],
            "properties": {
                "users": {
                    "type": "array",
                    "description": "List of IP Addresses of session users",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/RelaySessionUser"
                    }
                },
                "filters": {
                    "type": "array",
                    "description": "List of location filters to apply to the session",
                    "items": {
                        "$ref": "#/definitions/RelayFilterModel"
                    }
                },
                "webhook_url": {
                    "type": "string",
                    "description": "URL to send the session data to",
                    "example": "https://my-webhook.com/dump"
                }
            },
            "type": "object"
        },
        "RelaySessionUser": {
            "required": [
                "ip"
            ],
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP Address of session user",
                    "example": "1.1.1.1"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "RelayFilterModel": {
            "required": [
                "field",
                "filter_type",
                "values"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "description": "The field to filter"
                },
                "values": {
                    "type": "array",
                    "description": "The values to filter",
                    "items": {
                        "type": "string"
                    }
                },
                "filter_type": {
                    "type": "string",
                    "description": "The type of filter",
                    "example": "any",
                    "enum": [
                        "any",
                        "all",
                        "not"
                    ]
                }
            },
            "type": "object"
        },
        "RelaySessionBaseResponse": {
            "required": [
                "linked",
                "ready",
                "session_id",
                "status"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "The session ID"
                },
                "authorization_token": {
                    "type": "integer",
                    "description": "The authorization token for the session",
                    "example": 3500589645
                },
                "status": {
                    "type": "string",
                    "description": "The status of the session"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the session is ready to be used"
                },
                "linked": {
                    "type": "boolean",
                    "description": "If the session is linked to a relay"
                },
                "error": {
                    "type": "string",
                    "description": "The error message if the session failed"
                },
                "session_users": {
                    "type": "array",
                    "description": "List Session Users",
                    "items": {
                        "$ref": "#/definitions/RelaySessionUserResponse"
                    }
                },
                "relay": {
                    "description": "The relay details the session is linked to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelayResponse"
                        }
                    ]
                },
                "webhook_url": {
                    "type": "string",
                    "description": "The webhook URL that we will call once the session is ready",
                    "example": "https://my-webhook.com/dump"
                }
            },
            "type": "object"
        },
        "RelaySessionUserResponse": {
            "properties": {
                "ip_address": {
                    "type": "string",
                    "description": "The IP Address of the user",
                    "example": "1.1.1.1"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the user",
                    "example": 45.5088
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the user",
                    "example": -73.5878
                },
                "authorization_token": {
                    "type": "integer",
                    "description": "The authorization token of the user",
                    "example": 21986334
                }
            },
            "type": "object"
        },
        "RelayResponse": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP Address of the relay",
                    "example": "2.2.2.2"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the relay",
                    "example": "7349356945f1.st.edgegap.net"
                },
                "ports": {
                    "$ref": "#/definitions/MappedPortResponse"
                }
            },
            "type": "object"
        },
        "MappedPortResponse": {
            "properties": {
                "server": {
                    "$ref": "#/definitions/ServerRelayPort"
                },
                "client": {
                    "$ref": "#/definitions/ClientRelayPort"
                }
            },
            "type": "object"
        },
        "ServerRelayPort": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The port number",
                    "example": 32000
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the port",
                    "example": "UDP"
                },
                "link": {
                    "type": "string",
                    "description": "The link to the port",
                    "example": "7349356945f1.st.edgegap.net:32000"
                }
            },
            "type": "object"
        },
        "ClientRelayPort": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The port number",
                    "example": 32001
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the port",
                    "example": "UDP"
                },
                "link": {
                    "type": "string",
                    "description": "The link to the port",
                    "example": "7349356945f1.st.edgegap.net:32001"
                }
            },
            "type": "object"
        },
        "RelaySessionListResponse": {
            "properties": {
                "sessions": {
                    "type": "array",
                    "description": "List of relay sessions",
                    "items": {
                        "$ref": "#/definitions/RelaySessionBaseResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination Object",
                    "$ref": "#/definitions/Pagination"
                }
            },
            "type": "object"
        },
        "RelayUserAuthorizePayload": {
            "required": [
                "session_id",
                "user_ip"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "Session Request ID (ex: 0724828881e2-S)"
                },
                "user_ip": {
                    "type": "string",
                    "description": "User Ip to Authorize"
                }
            },
            "type": "object"
        },
        "RelaySessionUserBaseResponse": {
            "required": [
                "linked",
                "ready",
                "session_id",
                "status"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "The session ID"
                },
                "authorization_token": {
                    "type": "integer",
                    "description": "The authorization token for the session",
                    "example": 3500589645
                },
                "status": {
                    "type": "string",
                    "description": "The status of the session"
                },
                "ready": {
                    "type": "boolean",
                    "description": "If the session is ready to be used"
                },
                "linked": {
                    "type": "boolean",
                    "description": "If the session is linked to a relay"
                },
                "error": {
                    "type": "string",
                    "description": "The error message if the session failed"
                },
                "session_user": {
                    "description": "List Session Users",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelaySessionUserResponse"
                        }
                    ]
                },
                "relay": {
                    "description": "The relay details the session is linked to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/RelayResponse"
                        }
                    ]
                },
                "webhook_url": {
                    "type": "string",
                    "description": "The webhook URL that we will call once the session is ready",
                    "example": "https://my-webhook.com/dump"
                }
            },
            "type": "object"
        },
        "RelayUserRevokePayload": {
            "required": [
                "authorization_token",
                "session_id"
            ],
            "properties": {
                "session_id": {
                    "type": "string",
                    "description": "Session Request ID (ex: 0724828881e2-S)"
                },
                "authorization_token": {
                    "type": "integer",
                    "description": "Relay Authorization Token"
                }
            },
            "type": "object"
        },
        "LobbyCreatePayload": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the lobby"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "LobbyReadResponse": {
            "required": [
                "name",
                "status",
                "url"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the lobby"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the lobby"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the lobby"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "LobbyDeployPayload": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the lobby"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "LobbyTerminatePayload": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the lobby"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "DeploymentTagPayload": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the tag",
                    "example": "v1.0.0",
                    "maxLength": 20
                }
            },
            "type": "object"
        },
        "DeploymentTagResponse": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the tag"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of policy creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of policy last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "DeploymentTagListResponse": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeploymentTagResponse"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "pagination": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "api-model-registryartifacttagdeleteresponse": {
            "properties": {
                "deleted_tag": {
                    "type": "string",
                    "description": "Auto Generated Field for deleted_tag"
                },
                "artifact": {
                    "$ref": "#/definitions/api-model-tagdeleteartifact"
                }
            },
            "type": "object"
        },
        "api-model-tagdeleteartifact": {
            "properties": {
                "artifact_deleted": {
                    "type": "boolean",
                    "description": "Auto Generated Field for artifact_deleted"
                },
                "remaining_tags": {
                    "type": "array",
                    "description": "Auto Generated Field for remaining_tags",
                    "items": {
                        "type": "string",
                        "description": "Auto Generated Field for remaining_tags"
                    }
                },
                "image_hash": {
                    "type": "string",
                    "description": "Auto Generated Field for image_hash"
                },
                "size_mb": {
                    "type": "number",
                    "description": "Auto Generated Field for size_mb"
                }
            },
            "type": "object"
        },
        "ImageTagList": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImageTagPayload"
                    }
                }
            },
            "type": "object"
        },
        "ImageTagPayload": {
            "required": [
                "artifact",
                "last_push_at",
                "tag"
            ],
            "properties": {
                "tag": {
                    "type": "string",
                    "description": "The Image Tag"
                },
                "last_push_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The Last Push Time"
                },
                "artifact": {
                    "description": "The Artifact which this tag is linked to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ArtifactPayload"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "ArtifactPayload": {
            "required": [
                "artifact_deleted",
                "image_hash",
                "remaining_tags",
                "size_mb"
            ],
            "properties": {
                "artifact_deleted": {
                    "type": "boolean",
                    "description": "Whether the Artifact is deleted"
                },
                "remaining_tags": {
                    "type": "array",
                    "description": "The List of Tags associated with this Artifact",
                    "items": {
                        "type": "string"
                    }
                },
                "image_hash": {
                    "type": "string",
                    "description": "The Hash of the Image"
                },
                "size_mb": {
                    "type": "number",
                    "description": "The Size of the Image in MB"
                }
            },
            "type": "object"
        },
        "ContextDeploymentTagResponse": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the tag",
                    "example": "deployment-tag-name"
                },
                "create_time": {
                    "type": "string",
                    "description": "UTC time of tag creation",
                    "example": "2022-01-01 00:00:00.000000"
                },
                "last_updated": {
                    "type": "string",
                    "description": "UTC time of tag last update",
                    "example": "2022-01-01 00:00:00.000000"
                }
            },
            "type": "object"
        },
        "Monitor": {
            "required": [
                "host",
                "host_url",
                "name",
                "spec_url",
                "version"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "API Name"
                },
                "version": {
                    "type": "string",
                    "description": "API Version"
                },
                "host": {
                    "type": "string",
                    "description": "API Host"
                },
                "host_url": {
                    "type": "string",
                    "description": "API Host URL"
                },
                "spec_url": {
                    "type": "string",
                    "description": "API Swagger Specification Location"
                },
                "messages": {
                    "type": "array",
                    "description": "API Messages",
                    "items": {
                        "type": "string"
                    }
                },
                "errors": {
                    "type": "array",
                    "description": "API Errors",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}